from collections import deque


class UIDGenerator:
    BAG_SIZE = 1 << 14

    def __init__(self, min=0, max=65535):
        self.min = min
        self.max = max

        self.current = min

        self.freeIds = deque()

        self._usingBag = False
        self._bagEnd = None

    def request(self):
        if self._usingBag:
            uid = self.freeIds.popleft()
            if uid == self._bagEnd:
                self._usingBag = False
                self._bagEnd = None
                return uid
            else:
                return uid
        elif len(self.freeIds) >= min(self.BAG_SIZE, self.max):
            self._usingBag = True
            self._bagEnd = self.freeIds[-1]
            return self.freeIds.popleft()

        self.current += 1
        if self.current > self.max:
            raise OverflowError('UIDGenerator Overflow')

        return self.current

    def free(self, uid):
        if uid < self.min or uid > self.max:
            raise ValueError('Tried to deallocate invalid UID')

        self.freeIds.append(uid)

    def contains(self, uid):
        return self.min <= uid <= self.max
