from kpi.util.UniqueObject import UniqueObject
import socket
import Queue
import time


class EventNetworkConnector(UniqueObject):
    QueueSize = 5

    def __init__(self, host, port):
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.address = (host, port)
        self.q = Queue.Queue()
        self.last_dequeue_time = 0
        self.curr = b''
        taskMgr.doMethodLater(0.1, self._send, self.uniqueName('eventLogWriter'))

    def _send(self, task):
        now = time.time()

        if len(self.curr):
            num_written = self.sock.sendto(self.curr, self.address)
            self.curr = self.curr[num_written:]
        elif self.q.qsize() >= self.QueueSize:
            self.curr = b''.join([self.q.get().getMessage() for _ in range(self.QueueSize)])
            self.last_dequeue_time = now
        else:
            # Has it been a while since we last sent data.
            if self.q.qsize() and ((now - self.last_dequeue_time) > 3):
                self.curr = self.q.get().getMessage()
                self.last_dequeue_time = now

        return task.again

    def flush(self):
        taskMgr.remove(self.uniqueName('eventLogWriter'))

        self.curr = self.curr + b''.join([self.q.get().getMessage() for _ in range(self.q.qsize())])

        while len(self.curr):
            num_written = self.sock.sendto(self.curr, self.address)
            self.curr = self.curr[num_written:]

    def sendUpstream(self, dg):
        self.q.put(dg)
