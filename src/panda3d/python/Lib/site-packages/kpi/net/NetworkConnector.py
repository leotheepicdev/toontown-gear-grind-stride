from pandac.PandaModules import QueuedConnectionManager, QueuedConnectionReader
from pandac.PandaModules import ConnectionWriter, NetDatagram

from kpi.util.UniqueObject import UniqueObject


class NetworkConnector(UniqueObject):
    def __init__(self, host, port):
        self.host = host
        self.port = port

        self.connectionManager = QueuedConnectionManager()
        self.connectionReader = QueuedConnectionReader(self.connectionManager, 0)
        self.connectionWriter = ConnectionWriter(self.connectionManager, 0)

        self.connection = self.connectionManager.openTCPClientConnection(host, port, 10)
        if self.connection is None:
            raise ConnectionError('Could not connect to message director')
        self.connectionReader.addConnection(self.connection)
        self.isConnected = True

        taskMgr.add(self.readerPoll, self.uniqueName('readerPollTask'))
        taskMgr.add(self.checkConnection, self.uniqueName('checkConnectionTask'))

    def readerPoll(self, task):
        while self.readerPollOnce():
            pass

        return task.cont

    def readerPollOnce(self):
        # Check if we have any data available.
        dataAvalible = self.connectionReader.dataAvailable()
        if dataAvalible is False:
            return False

        # Get the data.
        datagram = NetDatagram()
        valid = self.connectionReader.getData(datagram)

        # Check to see if the data was got successfully.
        if valid:
            self.handleServerDatagram(datagram)

        return True

    def checkConnection(self, task):
        if not self.connectionReader.isConnectionOk(self.connection):
            self.isConnected = False
            self.lostConnection()
            return task.done
        else:
            return task.cont

    def sendUpstream(self, dg):
        self.connectionWriter.send(dg, self.connection)

    def handleServerDatagram(self, dg):
        raise NotImplementedError

    def lostConnection(self):
        raise NotImplementedError
