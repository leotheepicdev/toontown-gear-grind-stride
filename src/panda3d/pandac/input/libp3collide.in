1577202928
3 3
12 libp3collide 4 dlaq 12 panda3d.core 
253
267 20 get_collision_origin 0 6 520 36 CollisionSolid::get_collision_origin 0 1 1 0
69
virtual LPoint3 CollisionSolid::get_collision_origin(void) const = 0;

268 12 set_tangible 0 4 520 28 CollisionSolid::set_tangible 0 1 2 295
/**
 * Sets the current state of the 'tangible' flag.  Set this true to make the
 * solid tangible, so that a CollisionHandlerPusher will not allow another
 * object to intersect it, or false to make it intangible, so that a
 * CollisionHandlerPusher will ignore it except to throw an event.
 */
56
inline void CollisionSolid::set_tangible(bool tangible);

269 11 is_tangible 0 4 520 27 CollisionSolid::is_tangible 0 1 3 266
/**
 * Returns whether the solid is considered 'tangible' or not.  An intangible
 * solid has no effect in a CollisionHandlerPusher (except to throw an event);
 * it's useful for defining 'trigger' planes and spheres, that cause an effect
 * when passed through.
 */
52
inline bool CollisionSolid::is_tangible(void) const;

270 20 set_effective_normal 0 4 520 36 CollisionSolid::set_effective_normal 0 1 4 388
/**
 * Records a false normal for this CollisionSolid that will be reported by the
 * collision system with all collisions into it, instead of its actual normal.
 * This is useful as a workaround for the problem of an avatar wanting to
 * stand on a sloping ground; by storing a false normal, the ground appears to
 * be perfectly level, and the avatar does not tend to slide down it.
 */
83
inline void CollisionSolid::set_effective_normal(LVector3 const &effective_normal);

271 22 clear_effective_normal 0 4 520 38 CollisionSolid::clear_effective_normal 0 1 5 71
/**
 * Removes the normal previously set by set_effective_normal().
 */
57
inline void CollisionSolid::clear_effective_normal(void);

272 20 has_effective_normal 0 4 520 36 CollisionSolid::has_effective_normal 0 1 6 98
/**
 * Returns true if a special normal was set by set_effective_normal(), false
 * otherwise.
 */
61
inline bool CollisionSolid::has_effective_normal(void) const;

273 20 get_effective_normal 0 4 520 36 CollisionSolid::get_effective_normal 0 1 7 145
/**
 * Returns the normal that was set by set_effective_normal().  It is an error
 * to call this unless has_effective_normal() returns true.
 */
72
inline LVector3 const &CollisionSolid::get_effective_normal(void) const;

274 28 set_respect_effective_normal 0 4 520 44 CollisionSolid::set_respect_effective_normal 0 1 8 296
/**
 * This is only meaningful for CollisionSolids that will be added to a
 * traverser as colliders.  It is normally true, but if set false, it means
 * that this particular solid does not care about the "effective" normal of
 * other solids it meets, but rather always uses the true normal.
 */
88
inline void CollisionSolid::set_respect_effective_normal(bool respect_effective_normal);

275 28 get_respect_effective_normal 0 4 520 44 CollisionSolid::get_respect_effective_normal 0 1 9 46
/**
 * See set_respect_effective_normal().
 */
69
inline bool CollisionSolid::get_respect_effective_normal(void) const;

276 10 get_bounds 0 4 520 26 CollisionSolid::get_bounds 0 1 10 47
/**
 * Returns the solid's bounding volume.
 */
72
ConstPointerTo< BoundingVolume > CollisionSolid::get_bounds(void) const;

277 10 set_bounds 0 4 520 26 CollisionSolid::set_bounds 0 1 11 47
/**
 * Returns the solid's bounding volume.
 */
71
void CollisionSolid::set_bounds(BoundingVolume const &bounding_volume);

278 6 output 0 6 520 22 CollisionSolid::output 0 1 12 10
/**
 *
 */
61
virtual void CollisionSolid::output(std::ostream &out) const;

279 5 write 0 6 520 21 CollisionSolid::write 0 1 13 10
/**
 *
 */
82
virtual void CollisionSolid::write(std::ostream &out, int indent_level = 0) const;

280 14 get_class_type 0 4 520 30 CollisionSolid::get_class_type 0 1 14 0
55
static TypeHandle CollisionSolid::get_class_type(void);

281 12 CollisionBox 0 4 526 26 CollisionBox::CollisionBox 0 2 15 16 256
/**
 * Create the Box by giving a Center and distances of each of the sides of
 * box from the Center.
 */

/**
 * Create the Box by Specifying the Diagonal Points
 */

/**
 * Creates an invalid Box.  Only used when reading from a bam file.
 */

/**
 *
 */
195
inline explicit CollisionBox::CollisionBox(LPoint3 const &center, PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);
inline explicit CollisionBox::CollisionBox(LPoint3 const &min, LPoint3 const &max);

282 14 get_num_points 0 4 526 28 CollisionBox::get_num_points 0 1 17 68
/**
 * Returns 8: the number of vertices of a rectangular solid.
 */
52
inline int CollisionBox::get_num_points(void) const;

283 14 get_point_aabb 0 4 526 28 CollisionBox::get_point_aabb 0 1 18 67
/**
 * Returns the nth vertex of the Axis Aligned Bounding Box.
 */
57
inline LPoint3 CollisionBox::get_point_aabb(int n) const;

284 9 get_point 0 4 526 23 CollisionBox::get_point 0 1 19 45
/**
 * Returns the nth vertex of the OBB.
 */
52
inline LPoint3 CollisionBox::get_point(int n) const;

285 14 get_num_planes 0 4 526 28 CollisionBox::get_num_planes 0 1 20 65
/**
 * Returns 6: the number of faces of a rectangular solid.
 */
52
inline int CollisionBox::get_num_planes(void) const;

286 9 set_plane 0 4 526 23 CollisionBox::set_plane 0 1 21 57
/**
 * Creates the nth face of the rectangular solid.
 */
51
inline LPlane CollisionBox::set_plane(int n) const;

287 9 get_plane 0 4 526 23 CollisionBox::get_plane 0 1 22 57
/**
 * Returns the nth face of the rectangular solid.
 */
51
inline LPlane CollisionBox::get_plane(int n) const;

288 10 set_center 0 4 526 24 CollisionBox::set_center 0 2 23 24 22
/**
 *
 */

/**
 *
 */
143
inline void CollisionBox::set_center(LPoint3 const &center);
inline void CollisionBox::set_center(PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);

289 10 get_center 0 4 526 24 CollisionBox::get_center 0 1 25 10
/**
 *
 */
59
inline LPoint3 const &CollisionBox::get_center(void) const;

290 7 get_min 0 4 526 21 CollisionBox::get_min 0 1 26 10
/**
 *
 */
56
inline LPoint3 const &CollisionBox::get_min(void) const;

291 7 get_max 0 4 526 21 CollisionBox::get_max 0 1 27 10
/**
 *
 */
56
inline LPoint3 const &CollisionBox::get_max(void) const;

292 14 get_dimensions 0 4 526 28 CollisionBox::get_dimensions 0 1 28 10
/**
 *
 */
57
inline LVector3 CollisionBox::get_dimensions(void) const;

293 14 get_class_type 0 4 526 28 CollisionBox::get_class_type 0 1 29 0
53
static TypeHandle CollisionBox::get_class_type(void);

294 13 ~CollisionBox 0 4 526 27 CollisionBox::~CollisionBox 0 0 0
34
CollisionBox::~CollisionBox(void);

295 16 CollisionCapsule 0 4 530 34 CollisionCapsule::CollisionCapsule 0 2 30 31 115
/**
 *
 */

/**
 *
 */

/**
 * Creates an invalid capsule.  Only used when reading from a bam file.
 */

/**
 *
 */
276
inline explicit CollisionCapsule::CollisionCapsule(LPoint3 const &a, LPoint3 const &db, PN_stdfloat radius);
inline explicit CollisionCapsule::CollisionCapsule(PN_stdfloat ax, PN_stdfloat ay, PN_stdfloat az, PN_stdfloat bx, PN_stdfloat by, PN_stdfloat bz, PN_stdfloat radius);

296 11 set_point_a 0 4 530 29 CollisionCapsule::set_point_a 0 2 32 33 22
/**
 *
 */

/**
 *
 */
148
inline void CollisionCapsule::set_point_a(LPoint3 const &a);
inline void CollisionCapsule::set_point_a(PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);

297 11 get_point_a 0 4 530 29 CollisionCapsule::get_point_a 0 1 34 10
/**
 *
 */
64
inline LPoint3 const &CollisionCapsule::get_point_a(void) const;

298 11 set_point_b 0 4 530 29 CollisionCapsule::set_point_b 0 2 35 36 22
/**
 *
 */

/**
 *
 */
148
inline void CollisionCapsule::set_point_b(LPoint3 const &b);
inline void CollisionCapsule::set_point_b(PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);

299 11 get_point_b 0 4 530 29 CollisionCapsule::get_point_b 0 1 37 10
/**
 *
 */
64
inline LPoint3 const &CollisionCapsule::get_point_b(void) const;

300 10 set_radius 0 4 530 28 CollisionCapsule::set_radius 0 1 38 10
/**
 *
 */
61
inline void CollisionCapsule::set_radius(PN_stdfloat radius);

301 10 get_radius 0 4 530 28 CollisionCapsule::get_radius 0 1 39 10
/**
 *
 */
60
inline PN_stdfloat CollisionCapsule::get_radius(void) const;

302 14 get_class_type 0 4 530 32 CollisionCapsule::get_class_type 0 1 40 0
57
static TypeHandle CollisionCapsule::get_class_type(void);

303 17 ~CollisionCapsule 0 4 530 35 CollisionCapsule::~CollisionCapsule 0 0 0
42
CollisionCapsule::~CollisionCapsule(void);

304 14 get_class_type 0 4 533 32 CollisionHandler::get_class_type 0 1 42 0
57
static TypeHandle CollisionHandler::get_class_type(void);

305 16 CollisionHandler 0 4 533 34 CollisionHandler::CollisionHandler 0 1 41 10
/**
 *
 */
78
inline CollisionHandler::CollisionHandler(CollisionHandler const &) = default;

306 17 ~CollisionHandler 0 4 533 35 CollisionHandler::~CollisionHandler 0 0 0
42
CollisionHandler::~CollisionHandler(void);

307 13 CollisionNode 0 4 535 28 CollisionNode::CollisionNode 0 1 43 22
/**
 *
 */

/**
 *
 */
63
explicit CollisionNode::CollisionNode(std::string const &name);

308 16 set_collide_mask 0 4 535 31 CollisionNode::set_collide_mask 0 1 44 98
/**
 * Simultaneously sets both the "from" and "into" CollideMask values to the
 * same thing.
 */
62
inline void CollisionNode::set_collide_mask(CollideMask mask);

309 21 set_from_collide_mask 0 4 535 36 CollisionNode::set_from_collide_mask 0 1 45 222
/**
 * Sets the "from" CollideMask.  In order for a collision to be detected from
 * this object into another object, the intersection of this object's "from"
 * mask and the other object's "into" mask must be nonzero.
 */
60
void CollisionNode::set_from_collide_mask(CollideMask mask);

310 21 set_into_collide_mask 0 4 535 36 CollisionNode::set_into_collide_mask 0 1 46 222
/**
 * Sets the "into" CollideMask.  In order for a collision to be detected from
 * another object into this object, the intersection of the other object's
 * "from" mask and this object's "into" mask must be nonzero.
 */
67
inline void CollisionNode::set_into_collide_mask(CollideMask mask);

311 21 get_from_collide_mask 0 4 535 36 CollisionNode::get_from_collide_mask 0 1 47 233
/**
 * Returns the current "from" CollideMask.  In order for a collision to be
 * detected from this object into another object, the intersection of this
 * object's "from" mask and the other object's "into" mask must be nonzero.
 */
68
inline CollideMask CollisionNode::get_from_collide_mask(void) const;

312 21 get_into_collide_mask 0 4 535 36 CollisionNode::get_into_collide_mask 0 1 48 233
/**
 * Returns the current "into" CollideMask.  In order for a collision to be
 * detected from another object into this object, the intersection of the
 * other object's "from" mask and this object's "into" mask must be nonzero.
 */
68
inline CollideMask CollisionNode::get_into_collide_mask(void) const;

313 12 clear_solids 0 4 535 27 CollisionNode::clear_solids 0 1 49 44
/**
 * Removes all solids from the node.
 */
46
inline void CollisionNode::clear_solids(void);

314 14 get_num_solids 0 4 535 29 CollisionNode::get_num_solids 0 1 50 10
/**
 *
 */
61
inline std::size_t CollisionNode::get_num_solids(void) const;

315 9 get_solid 0 4 535 24 CollisionNode::get_solid 0 1 51 10
/**
 *
 */
86
inline ConstPointerTo< CollisionSolid > CollisionNode::get_solid(std::size_t n) const;

316 12 modify_solid 0 4 535 27 CollisionNode::modify_solid 0 1 52 10
/**
 *
 */
78
inline PointerTo< CollisionSolid > CollisionNode::modify_solid(std::size_t n);

317 9 set_solid 0 4 535 24 CollisionNode::set_solid 0 1 53 55
/**
 * Replaces the solid with the indicated index.
 */
75
inline void CollisionNode::set_solid(std::size_t n, CollisionSolid *solid);

318 12 insert_solid 0 4 535 27 CollisionNode::insert_solid 0 1 54 77
/**
 * Inserts the indicated solid to the node at the indicated position.
 */
84
inline void CollisionNode::insert_solid(std::size_t n, CollisionSolid const *solid);

319 12 remove_solid 0 4 535 27 CollisionNode::remove_solid 0 1 55 110
/**
 * Removes the solid with the indicated index.  This will shift all subsequent
 * indices down by one.
 */
55
inline void CollisionNode::remove_solid(std::size_t n);

320 9 add_solid 0 4 535 24 CollisionNode::add_solid 0 1 56 121
/**
 * Adds the indicated solid to the node.  Returns the index of the new solid
 * within the node's list of solids.
 */
73
inline std::size_t CollisionNode::add_solid(CollisionSolid const *solid);

321 17 get_collider_sort 0 4 535 32 CollisionNode::get_collider_sort 0 1 57 114
/**
 * Returns the collider_sort value that has been set for this particular node.
 * See set_collider_sort().
 */
56
inline int CollisionNode::get_collider_sort(void) const;

322 17 set_collider_sort 0 4 535 32 CollisionNode::set_collider_sort 0 1 58 594
/**
 * Sets a particular collider_sort value on this node.  This controls the
 * order in which colliders (that is, "from nodes") are grouped together for
 * the collision traversal.
 *
 * If there are 32 or fewer colliders added to any particular
 * CollisionTraverser, then this value has no meaning.  It is only useful if
 * there are many colliders, which may force the CollisionTraverser to make
 * multiple passes through the data; in that case, it may be a useful
 * optimization to group colliders that have similar bounding volumes together
 * (by giving them similar sort values).
 */
55
inline void CollisionNode::set_collider_sort(int sort);

323 24 get_default_collide_mask 0 4 535 39 CollisionNode::get_default_collide_mask 0 1 59 80
/**
 * Returns the default into_collide_mask assigned to new CollisionNodes.
 */
72
static inline CollideMask CollisionNode::get_default_collide_mask(void);

324 14 get_class_type 0 4 535 29 CollisionNode::get_class_type 0 1 60 0
54
static TypeHandle CollisionNode::get_class_type(void);

325 18 CollisionTraverser 0 4 542 38 CollisionTraverser::CollisionTraverser 0 2 61 62 10
/**
 *
 */
168
explicit CollisionTraverser::CollisionTraverser(std::string const &name = "ctrav");
inline CollisionTraverser::CollisionTraverser(CollisionTraverser const &) = default;

326 19 ~CollisionTraverser 0 4 542 39 CollisionTraverser::~CollisionTraverser 0 0 10
/**
 *
 */
46
CollisionTraverser::~CollisionTraverser(void);

327 26 set_respect_prev_transform 0 4 542 46 CollisionTraverser::set_respect_prev_transform 0 1 63 370
/**
 * Sets the flag that indicates whether the prev_transform stored on a node
 * (as updated via set_fluid_pos(), etc.) is respected to calculate
 * collisions.  If this is true, certain types of collision tests will be
 * enhanced by the information about objects in motion.  If this is false,
 * objects are always considered to be static.  The default is false.
 */
70
inline void CollisionTraverser::set_respect_prev_transform(bool flag);

328 26 get_respect_prev_transform 0 4 542 46 CollisionTraverser::get_respect_prev_transform 0 1 64 162
/**
 * Returns the flag that indicates whether the prev_transform stored on a node
 * is respected to calculate collisions.  See set_respect_prev_transform().
 */
71
inline bool CollisionTraverser::get_respect_prev_transform(void) const;

329 12 add_collider 0 4 542 32 CollisionTraverser::add_collider 0 1 65 437
/**
 * Adds a new CollisionNode, representing an object that will be tested for
 * collisions into other objects, along with the handler that will serve each
 * detected collision.  Each CollisionNode may be served by only one handler
 * at a time, but a given handler may serve many CollisionNodes.
 *
 * The handler that serves a particular node may be changed from time to time
 * by calling add_collider() again on the same node.
 */
91
void CollisionTraverser::add_collider(NodePath const &collider, CollisionHandler *handler);

330 15 remove_collider 0 4 542 35 CollisionTraverser::remove_collider 0 1 66 263
/**
 * Removes the collider (and its associated handler) from the set of
 * CollisionNodes that will be tested each frame for collisions into other
 * objects.  Returns true if the definition was found and removed, false if it
 * wasn't present to begin with.
 */
67
bool CollisionTraverser::remove_collider(NodePath const &collider);

331 12 has_collider 0 4 542 32 CollisionTraverser::has_collider 0 1 67 145
/**
 * Returns true if the indicated node is current in the set of nodes that will
 * be tested each frame for collisions into other objects.
 */
70
bool CollisionTraverser::has_collider(NodePath const &collider) const;

332 17 get_num_colliders 0 4 542 37 CollisionTraverser::get_num_colliders 0 1 68 108
/**
 * Returns the number of CollisionNodes that have been added to the traverser
 * via add_collider().
 */
54
int CollisionTraverser::get_num_colliders(void) const;

333 12 get_collider 0 4 542 32 CollisionTraverser::get_collider 0 1 69 100
/**
 * Returns the nth CollisionNode that has been added to the traverser via
 * add_collider().
 */
55
NodePath CollisionTraverser::get_collider(int n) const;

334 11 get_handler 0 4 542 31 CollisionTraverser::get_handler 0 1 70 169
/**
 * Returns the handler that is currently assigned to serve the indicated
 * collision node, or NULL if the node is not on the traverser's set of active
 * nodes.
 */
82
CollisionHandler *CollisionTraverser::get_handler(NodePath const &collider) const;

335 15 clear_colliders 0 4 542 35 CollisionTraverser::clear_colliders 0 1 71 90
/**
 * Completely empties the set of collision nodes and their associated
 * handlers.
 */
47
void CollisionTraverser::clear_colliders(void);

336 8 traverse 0 4 542 28 CollisionTraverser::traverse 0 1 72 10
/**
 *
 */
56
void CollisionTraverser::traverse(NodePath const &root);

337 12 set_recorder 0 4 542 32 CollisionTraverser::set_recorder 0 1 73 777
/**
 * Uses the indicated CollisionRecorder object to start recording the
 * intersection tests made by each subsequent call to traverse() on this
 * object.  A particular CollisionRecorder object can only record one
 * traverser at a time; if this object has already been assigned to another
 * traverser, that assignment is broken.
 *
 * This is intended to be used in a debugging mode to try to determine what
 * work is being performed by the collision traversal.  Usually, attaching a
 * recorder will impose significant runtime overhead.
 *
 * This does not transfer ownership of the CollisionRecorder pointer;
 * maintenance of that remains the caller's responsibility.  If the
 * CollisionRecorder is destructed, it will cleanly remove itself from the
 * traverser.
 */
67
void CollisionTraverser::set_recorder(CollisionRecorder *recorder);

338 12 has_recorder 0 4 542 32 CollisionTraverser::has_recorder 0 1 74 120
/**
 * Returns true if the CollisionTraverser has a CollisionRecorder object
 * currently assigned, false otherwise.
 */
57
inline bool CollisionTraverser::has_recorder(void) const;

339 12 get_recorder 0 4 542 32 CollisionTraverser::get_recorder 0 1 75 99
/**
 * Returns the CollisionRecorder currently assigned, or NULL if no recorder is
 * assigned.
 */
71
inline CollisionRecorder *CollisionTraverser::get_recorder(void) const;

340 14 clear_recorder 0 4 542 34 CollisionTraverser::clear_recorder 0 1 76 107
/**
 * Removes the CollisionRecorder from the traverser and restores normal low-
 * overhead operation.
 */
53
inline void CollisionTraverser::clear_recorder(void);

341 6 output 0 4 546 25 CollisionRecorder::output 0 1 82 10
/**
 *
 */
56
void CollisionRecorder::output(std::ostream &out) const;

342 14 get_class_type 0 4 546 33 CollisionRecorder::get_class_type 0 1 83 0
58
static TypeHandle CollisionRecorder::get_class_type(void);

343 15 show_collisions 0 4 542 35 CollisionTraverser::show_collisions 0 1 77 300
/**
 * This is a high-level function to create a CollisionVisualizer object to
 * render the collision tests performed by this traverser.  The supplied root
 * should be any node in the scene graph; typically, the top node (e.g.
 * render).  The CollisionVisualizer will be attached to this node.
 */
69
PandaNode *CollisionTraverser::show_collisions(NodePath const &root);

344 15 hide_collisions 0 4 542 35 CollisionTraverser::hide_collisions 0 1 78 69
/**
 * Undoes the effect of a previous call to show_collisions().
 */
47
void CollisionTraverser::hide_collisions(void);

345 6 output 0 4 542 26 CollisionTraverser::output 0 1 79 10
/**
 *
 */
57
void CollisionTraverser::output(std::ostream &out) const;

346 5 write 0 4 542 25 CollisionTraverser::write 0 1 80 10
/**
 *
 */
74
void CollisionTraverser::write(std::ostream &out, int indent_level) const;

347 14 get_class_type 0 4 542 34 CollisionTraverser::get_class_type 0 1 81 0
59
static TypeHandle CollisionTraverser::get_class_type(void);

348 8 get_from 0 4 548 24 CollisionEntry::get_from 0 1 84 104
/**
 * Returns the CollisionSolid pointer for the particular solid that triggered
 * this collision.
 */
66
inline CollisionSolid const *CollisionEntry::get_from(void) const;

349 8 has_into 0 4 548 24 CollisionEntry::has_into 0 1 85 288
/**
 * Returns true if the "into" solid is, in fact, a CollisionSolid, and its
 * pointer is known (in which case get_into() may be called to retrieve it).
 * If this returns false, the collision was detected into a GeomNode, and
 * there is no CollisionSolid pointer to be retrieved.
 */
49
inline bool CollisionEntry::has_into(void) const;

350 8 get_into 0 4 548 24 CollisionEntry::get_into 0 1 86 243
/**
 * Returns the CollisionSolid pointer for the particular solid was collided
 * into.  This pointer might be NULL if the collision was into a piece of
 * visible geometry, instead of a normal CollisionSolid collision; see
 * has_into().
 */
66
inline CollisionSolid const *CollisionEntry::get_into(void) const;

351 13 get_from_node 0 4 548 29 CollisionEntry::get_from_node 0 1 87 182
/**
 * Returns the node that contains the CollisionSolid that triggered this
 * collision.  This will be a node that has been added to a CollisionTraverser
 * via add_collider().
 */
64
inline CollisionNode *CollisionEntry::get_from_node(void) const;

352 13 get_into_node 0 4 548 29 CollisionEntry::get_into_node 0 1 88 254
/**
 * Returns the node that contains the CollisionSolid that was collided into.
 * This returns a PandaNode pointer instead of something more specific,
 * because it might be either a CollisionNode or a GeomNode.
 *
 * Also see get_into_node_path().
 */
60
inline PandaNode *CollisionEntry::get_into_node(void) const;

353 18 get_from_node_path 0 4 548 34 CollisionEntry::get_from_node_path 0 1 89 224
/**
 * Returns the NodePath that represents the CollisionNode that contains the
 * CollisionSolid that triggered this collision.  This will be a NodePath that
 * has been added to a CollisionTraverser via add_collider().
 */
63
inline NodePath CollisionEntry::get_from_node_path(void) const;

354 18 get_into_node_path 0 4 548 34 CollisionEntry::get_into_node_path 0 1 90 338
/**
 * Returns the NodePath that represents the specific CollisionNode or GeomNode
 * instance that was collided into.  This is the same node returned by
 * get_into_node(), represented as a NodePath; however, it may be more useful
 * because the NodePath can resolve the particular instance of the node, if
 * there is more than one.
 */
63
inline NodePath CollisionEntry::get_into_node_path(void) const;

355 5 set_t 0 4 548 21 CollisionEntry::set_t 0 1 91 82
/**
 * Sets a time value for this collision relative to other CollisionEntries
 */
49
inline void CollisionEntry::set_t(PN_stdfloat t);

356 5 get_t 0 4 548 21 CollisionEntry::get_t 0 1 92 83
/**
 * returns time value for this collision relative to other CollisionEntries
 */
53
inline PN_stdfloat CollisionEntry::get_t(void) const;

357 8 collided 0 4 548 24 CollisionEntry::collided 0 1 93 188
/**
 * returns true if this represents an actual collision as opposed to a
 * potential collision, needed for iterative collision resolution where path
 * of collider changes mid-frame
 */
49
inline bool CollisionEntry::collided(void) const;

358 14 reset_collided 0 4 548 30 CollisionEntry::reset_collided 0 1 94 45
/**
 * prepare for another collision test
 */
49
inline void CollisionEntry::reset_collided(void);

359 26 get_respect_prev_transform 0 4 548 42 CollisionEntry::get_respect_prev_transform 0 1 95 203
/**
 * Returns true if the collision was detected by a CollisionTraverser whose
 * respect_prev_transform flag was set true, meaning we should consider motion
 * significant in evaluating collisions.
 */
67
inline bool CollisionEntry::get_respect_prev_transform(void) const;

360 17 set_surface_point 0 4 548 33 CollisionEntry::set_surface_point 0 1 96 178
/**
 * Stores the point, on the surface of the "into" object, at which a collision
 * is detected.
 *
 * This point is specified in the coordinate space of the "into" object.
 */
68
inline void CollisionEntry::set_surface_point(LPoint3 const &point);

361 18 set_surface_normal 0 4 548 34 CollisionEntry::set_surface_normal 0 1 97 171
/**
 * Stores the surface normal of the "into" object at the point of the
 * intersection.
 *
 * This normal is specified in the coordinate space of the "into" object.
 */
71
inline void CollisionEntry::set_surface_normal(LVector3 const &normal);

362 18 set_interior_point 0 4 548 34 CollisionEntry::set_interior_point 0 1 98 352
/**
 * Stores the point, within the interior of the "into" object, which
 * represents the depth to which the "from" object has penetrated.  This can
 * also be described as the intersection point on the surface of the "from"
 * object (which is inside the "into" object).
 *
 * This point is specified in the coordinate space of the "into" object.
 */
69
inline void CollisionEntry::set_interior_point(LPoint3 const &point);

363 17 has_surface_point 0 4 548 33 CollisionEntry::has_surface_point 0 1 99 174
/**
 * Returns true if the surface point has been specified, false otherwise.  See
 * get_surface_point().  Some types of collisions may not compute the surface
 * point.
 */
58
inline bool CollisionEntry::has_surface_point(void) const;

364 18 has_surface_normal 0 4 548 34 CollisionEntry::has_surface_normal 0 1 100 176
/**
 * Returns true if the surface normal has been specified, false otherwise.
 * See get_surface_normal().  Some types of collisions may not compute the
 * surface normal.
 */
59
inline bool CollisionEntry::has_surface_normal(void) const;

365 18 has_interior_point 0 4 548 34 CollisionEntry::has_interior_point 0 1 101 176
/**
 * Returns true if the interior point has been specified, false otherwise.
 * See get_interior_point().  Some types of collisions may not compute the
 * interior point.
 */
59
inline bool CollisionEntry::has_interior_point(void) const;

366 15 set_contact_pos 0 4 548 31 CollisionEntry::set_contact_pos 0 1 102 190
/**
 * Stores the position of the "from" object at the instant at which the
 * collision is first detected.
 *
 * This position is specified in the coordinate space of the "into" object.
 */
64
inline void CollisionEntry::set_contact_pos(LPoint3 const &pos);

367 18 set_contact_normal 0 4 548 34 CollisionEntry::set_contact_normal 0 1 103 154
/**
 * Stores the surface normal of the "into" object at the contact pos.
 *
 * This normal is specified in the coordinate space of the "into" object.
 */
71
inline void CollisionEntry::set_contact_normal(LVector3 const &normal);

368 15 has_contact_pos 0 4 548 31 CollisionEntry::has_contact_pos 0 1 104 172
/**
 * Returns true if the contact position has been specified, false otherwise.
 * See get_contact_pos().  Some types of collisions may not compute the
 * contact pos.
 */
56
inline bool CollisionEntry::has_contact_pos(void) const;

369 18 has_contact_normal 0 4 548 34 CollisionEntry::has_contact_normal 0 1 105 176
/**
 * Returns true if the contact normal has been specified, false otherwise.
 * See get_contact_normal().  Some types of collisions may not compute the
 * contact normal.
 */
59
inline bool CollisionEntry::has_contact_normal(void) const;

370 17 get_surface_point 0 4 548 33 CollisionEntry::get_surface_point 0 1 106 330
/**
 * Returns the point, on the surface of the "into" object, at which a
 * collision is detected.  This can be thought of as the first point of
 * intersection.  However the contact point is the actual first point of
 * intersection.
 *
 * The point will be converted into whichever coordinate space the caller
 * specifies.
 */
71
LPoint3 CollisionEntry::get_surface_point(NodePath const &space) const;

371 18 get_surface_normal 0 4 548 34 CollisionEntry::get_surface_normal 0 1 107 200
/**
 * Returns the surface normal of the "into" object at the point at which a
 * collision is detected.
 *
 * The normal will be converted into whichever coordinate space the caller
 * specifies.
 */
73
LVector3 CollisionEntry::get_surface_normal(NodePath const &space) const;

372 18 get_interior_point 0 4 548 34 CollisionEntry::get_interior_point 0 1 108 431
/**
 * Returns the point, within the interior of the "into" object, which
 * represents the depth to which the "from" object has penetrated.  This can
 * also be described as the intersection point on the surface of the "from"
 * object (which is inside the "into" object).  It can be thought of as the
 * deepest point of intersection.
 *
 * The point will be converted into whichever coordinate space the caller
 * specifies.
 */
72
LPoint3 CollisionEntry::get_interior_point(NodePath const &space) const;

373 7 get_all 0 4 548 23 CollisionEntry::get_all 0 1 109 244
/**
 * Simultaneously transforms the surface point, surface normal, and interior
 * point of the collision into the indicated coordinate space.
 *
 * Returns true if all three properties are available, or false if any one of
 * them is not.
 */
133
bool CollisionEntry::get_all(NodePath const &space, LPoint3 &surface_point, LVector3 &surface_normal, LPoint3 &interior_point) const;

374 15 get_contact_pos 0 4 548 31 CollisionEntry::get_contact_pos 0 1 110 200
/**
 * Returns the position of the "from" object at the instant that a collision
 * is first detected.
 *
 * The position will be converted into whichever coordinate space the caller
 * specifies.
 */
69
LPoint3 CollisionEntry::get_contact_pos(NodePath const &space) const;

375 18 get_contact_normal 0 4 548 34 CollisionEntry::get_contact_normal 0 1 111 175
/**
 * Returns the surface normal of the "into" object at the contact position.
 *
 * The normal will be converted into whichever coordinate space the caller
 * specifies.
 */
73
LVector3 CollisionEntry::get_contact_normal(NodePath const &space) const;

376 20 get_all_contact_info 0 4 548 36 CollisionEntry::get_all_contact_info 0 1 112 230
/**
 * Simultaneously transforms the contact position and contact normal of the
 * collision into the indicated coordinate space.
 *
 * Returns true if all three properties are available, or false if any one of
 * them is not.
 */
119
bool CollisionEntry::get_all_contact_info(NodePath const &space, LPoint3 &contact_pos, LVector3 &contact_normal) const;

377 6 output 0 4 548 22 CollisionEntry::output 0 1 113 10
/**
 *
 */
53
void CollisionEntry::output(std::ostream &out) const;

378 5 write 0 4 548 21 CollisionEntry::write 0 1 114 10
/**
 *
 */
74
void CollisionEntry::write(std::ostream &out, int indent_level = 0) const;

379 14 get_class_type 0 4 548 30 CollisionEntry::get_class_type 0 1 115 0
55
static TypeHandle CollisionEntry::get_class_type(void);

380 15 ~CollisionEntry 0 4 548 31 CollisionEntry::~CollisionEntry 0 0 0
38
CollisionEntry::~CollisionEntry(void);

381 14 CollisionPlane 0 4 554 30 CollisionPlane::CollisionPlane 0 2 116 117 168
/**
 * This is only for the convenience of CollisionPolygon.  Normally, you should
 * not attempt to create an uninitialized CollisionPlane.
 */

/**
 *
 */

/**
 *
 */
126
inline CollisionPlane::CollisionPlane(LPlane const &plane);
inline CollisionPlane::CollisionPlane(CollisionPlane const &copy);

382 10 get_normal 0 4 554 26 CollisionPlane::get_normal 0 1 118 10
/**
 *
 */
55
inline LVector3 CollisionPlane::get_normal(void) const;

383 13 dist_to_plane 0 4 554 29 CollisionPlane::dist_to_plane 0 1 119 10
/**
 *
 */
77
inline PN_stdfloat CollisionPlane::dist_to_plane(LPoint3 const &point) const;

384 9 set_plane 0 4 554 25 CollisionPlane::set_plane 0 1 120 10
/**
 *
 */
59
inline void CollisionPlane::set_plane(LPlane const &plane);

385 9 get_plane 0 4 554 25 CollisionPlane::get_plane 0 1 121 10
/**
 *
 */
59
inline LPlane const &CollisionPlane::get_plane(void) const;

386 4 flip 0 4 554 20 CollisionPlane::flip 0 1 122 57
/**
 * Convenience method to flip the plane in-place.
 */
39
inline void CollisionPlane::flip(void);

387 14 get_class_type 0 4 554 30 CollisionPlane::get_class_type 0 1 123 0
55
static TypeHandle CollisionPlane::get_class_type(void);

388 15 ~CollisionPlane 0 4 554 31 CollisionPlane::~CollisionPlane 0 0 0
38
CollisionPlane::~CollisionPlane(void);

389 18 CollisionFloorMesh 0 4 558 38 CollisionFloorMesh::CollisionFloorMesh 0 1 124 156
/**
 * This is only for the convenience of CollisionPolygon.  Normally, you should
 * not attempt to create an uninitialized CollisionPlane.
 */

/**
 *
 */
52
inline CollisionFloorMesh::CollisionFloorMesh(void);

390 10 add_vertex 0 4 558 30 CollisionFloorMesh::add_vertex 0 1 125 47
/**
 * store away a vertex to index against
 */
64
inline void CollisionFloorMesh::add_vertex(LPoint3 const &vert);

391 12 add_triangle 0 4 558 32 CollisionFloorMesh::add_triangle 0 1 126 42
/**
 * store a triangle for processing
 */
101
void CollisionFloorMesh::add_triangle(unsigned int pointA, unsigned int pointB, unsigned int pointC);

392 16 get_num_vertices 0 4 558 36 CollisionFloorMesh::get_num_vertices 0 1 127 0
69
inline unsigned int CollisionFloorMesh::get_num_vertices(void) const;

393 10 get_vertex 0 4 558 30 CollisionFloorMesh::get_vertex 0 1 128 0
79
inline LPoint3 const &CollisionFloorMesh::get_vertex(unsigned int index) const;

394 17 get_num_triangles 0 4 558 37 CollisionFloorMesh::get_num_triangles 0 1 129 0
70
inline unsigned int CollisionFloorMesh::get_num_triangles(void) const;

395 12 get_triangle 0 4 558 32 CollisionFloorMesh::get_triangle 0 1 130 0
75
inline LPoint3i CollisionFloorMesh::get_triangle(unsigned int index) const;

396 14 get_class_type 0 4 558 34 CollisionFloorMesh::get_class_type 0 1 131 0
59
static TypeHandle CollisionFloorMesh::get_class_type(void);

397 19 ~CollisionFloorMesh 0 4 558 39 CollisionFloorMesh::~CollisionFloorMesh 0 0 0
46
CollisionFloorMesh::~CollisionFloorMesh(void);

398 16 CollisionPolygon 0 4 560 34 CollisionPolygon::CollisionPolygon 0 3 132 133 134 127
/**
 *
 */

/**
 *
 */

/**
 *
 */

/**
 * Creates an invalid polygon.  Only used when reading from a bam file.
 */

/**
 *
 */
310
inline CollisionPolygon::CollisionPolygon(LVecBase3 const &a, LVecBase3 const &b, LVecBase3 const &c);
inline CollisionPolygon::CollisionPolygon(LVecBase3 const &a, LVecBase3 const &b, LVecBase3 const &c, LVecBase3 const &d);
inline CollisionPolygon::CollisionPolygon(LPoint3 const *begin, LPoint3 const *end);

399 14 get_num_points 0 4 560 32 CollisionPolygon::get_num_points 0 1 135 66
/**
 * Returns the number of vertices of the CollisionPolygon.
 */
64
inline std::size_t CollisionPolygon::get_num_points(void) const;

400 9 get_point 0 4 560 27 CollisionPolygon::get_point 0 1 136 82
/**
 * Returns the nth vertex of the CollisionPolygon, expressed in 3-D space.
 */
64
inline LPoint3 CollisionPolygon::get_point(std::size_t n) const;

401 13 verify_points 0 4 560 31 CollisionPolygon::verify_points 0 3 137 138 139 676
/**
 * Verifies that the indicated set of points will define a valid
 * CollisionPolygon: that is, at least three non-collinear points, with no
 * points repeated.
 */

/**
 * Verifies that the indicated set of points will define a valid
 * CollisionPolygon: that is, at least three non-collinear points, with no
 * points repeated.
 */

/**
 * Verifies that the indicated set of points will define a valid
 * CollisionPolygon: that is, at least three non-collinear points, with no
 * points repeated.
 *
 * This does not check that the polygon defined is convex; that check is made
 * later, once we have projected the points to 2-d space where the decision is
 * easier.
 */
316
static inline bool CollisionPolygon::verify_points(LPoint3 const &a, LPoint3 const &b, LPoint3 const &c);
static inline bool CollisionPolygon::verify_points(LPoint3 const &a, LPoint3 const &b, LPoint3 const &c, LPoint3 const &d);
static bool CollisionPolygon::verify_points(LPoint3 const *begin, LPoint3 const *end);

402 8 is_valid 0 4 560 26 CollisionPolygon::is_valid 0 1 140 122
/**
 * Returns true if the CollisionPolygon is valid (that is, it has at least
 * three vertices), or false otherwise.
 */
44
bool CollisionPolygon::is_valid(void) const;

403 10 is_concave 0 4 560 28 CollisionPolygon::is_concave 0 1 141 106
/**
 * Returns true if the CollisionPolygon appears to be concave, or false if it
 * is safely convex.
 */
46
bool CollisionPolygon::is_concave(void) const;

404 14 get_class_type 0 4 560 32 CollisionPolygon::get_class_type 0 1 142 0
57
static TypeHandle CollisionPolygon::get_class_type(void);

405 17 ~CollisionPolygon 0 4 560 35 CollisionPolygon::~CollisionPolygon 0 0 0
42
CollisionPolygon::~CollisionPolygon(void);

406 21 CollisionHandlerEvent 0 4 561 44 CollisionHandlerEvent::CollisionHandlerEvent 0 2 143 144 168
/**
 * The default CollisionHandlerEvent will throw no events.  Its pattern
 * strings must first be set via a call to add_in_pattern() and/or
 * add_out_pattern().
 */
145
CollisionHandlerEvent::CollisionHandlerEvent(void);
inline CollisionHandlerEvent::CollisionHandlerEvent(CollisionHandlerEvent const &) = default;

407 17 clear_in_patterns 0 4 561 40 CollisionHandlerEvent::clear_in_patterns 0 1 145 80
/**
 * Removes all of the previously-added in patterns.  See add_in_pattern.
 */
59
inline void CollisionHandlerEvent::clear_in_patterns(void);

408 14 add_in_pattern 0 4 561 37 CollisionHandlerEvent::add_in_pattern 0 1 146 1586
/**
 * Adds a pattern string to the list of events that will be generated in
 * response to a collision.  The pattern string describes how the event name
 * will be composed.  It is a string that may contain any of the following:
 *
 * %fn  - the name of the "from" object's node %in  - the name of the "into"
 * object's node %fs  - 't' if "from" is tangible, 'i' if intangible %is  -
 * 't' if "into" is tangible, 'i' if intangible %ig  - 'c' if the collision is
 * into a CollisionNode, 'g' if it is a geom.
 *
 * %(tag)fh - generate event only if "from" node has the indicated net tag.
 * %(tag)fx - generate event only if "from" node does not have the indicated
 * net tag.  %(tag)ih - generate event only if "into" node has the indicated
 * net tag.  %(tag)ix - generate event only if "into" node does not have the
 * indicated net tag.  %(tag)ft - the indicated net tag value of the "from"
 * node.  %(tag)it - the indicated net tag value of the "into" node.
 *
 * Parentheses in the above are literal and should be included in the actual
 * pattern.
 *
 * The event name will be based on the in_pattern string specified here, with
 * all occurrences of the above strings replaced with the corresponding
 * values.
 *
 * In general, the in_pattern event is thrown on the first detection of a
 * collision between two particular nodes.  In subsequent passes, as long as a
 * collision between those two nodes continues to be detected each frame, the
 * again_pattern is thrown.  The first frame in which the collision is no
 * longer detected, the out_pattern event is thrown.
 */
81
inline void CollisionHandlerEvent::add_in_pattern(std::string const &in_pattern);

409 14 set_in_pattern 0 4 561 37 CollisionHandlerEvent::set_in_pattern 0 1 147 189
/**
 * This method is deprecated; it completely replaces all the in patterns that
 * have previously been set with the indicated pattern.
 *
 * @deprecated Use add_in_pattern() instead.
 */
81
inline void CollisionHandlerEvent::set_in_pattern(std::string const &in_pattern);

410 19 get_num_in_patterns 0 4 561 42 CollisionHandlerEvent::get_num_in_patterns 0 1 148 73
/**
 * Returns the number of in pattern strings that have been added.
 */
66
inline int CollisionHandlerEvent::get_num_in_patterns(void) const;

411 14 get_in_pattern 0 4 561 37 CollisionHandlerEvent::get_in_pattern 0 1 149 145
/**
 * Returns the nth pattern string that indicates how the event names are
 * generated for each collision detected.  See add_in_pattern().
 */
70
inline std::string CollisionHandlerEvent::get_in_pattern(int n) const;

412 20 clear_again_patterns 0 4 561 43 CollisionHandlerEvent::clear_again_patterns 0 1 150 83
/**
 * Removes all of the previously-added in patterns.  See add_again_pattern.
 */
62
inline void CollisionHandlerEvent::clear_again_patterns(void);

413 17 add_again_pattern 0 4 561 40 CollisionHandlerEvent::add_again_pattern 0 1 151 649
/**
 * Adds the pattern string that indicates how the event names are generated
 * when a collision between two particular nodes is *still* detected.  This
 * event is thrown each consecutive time a collision between two particular
 * nodes is detected, starting with the second time.
 *
 * In general, the in_pattern event is thrown on the first detection of a
 * collision between two particular nodes.  In subsequent passes, as long as a
 * collision between those two nodes continues to be detected each frame, the
 * again_pattern is thrown.  The first frame in which the collision is no
 * longer detected, the out_pattern event is thrown.
 */
87
inline void CollisionHandlerEvent::add_again_pattern(std::string const &again_pattern);

414 17 set_again_pattern 0 4 561 40 CollisionHandlerEvent::set_again_pattern 0 1 152 192
/**
 * This method is deprecated; it completely replaces all the in patterns that
 * have previously been set with the indicated pattern.
 *
 * @deprecated Use add_again_pattern() instead.
 */
87
inline void CollisionHandlerEvent::set_again_pattern(std::string const &again_pattern);

415 22 get_num_again_patterns 0 4 561 45 CollisionHandlerEvent::get_num_again_patterns 0 1 153 73
/**
 * Returns the number of in pattern strings that have been added.
 */
69
inline int CollisionHandlerEvent::get_num_again_patterns(void) const;

416 17 get_again_pattern 0 4 561 40 CollisionHandlerEvent::get_again_pattern 0 1 154 148
/**
 * Returns the nth pattern string that indicates how the event names are
 * generated for each collision detected.  See add_again_pattern().
 */
73
inline std::string CollisionHandlerEvent::get_again_pattern(int n) const;

417 18 clear_out_patterns 0 4 561 41 CollisionHandlerEvent::clear_out_patterns 0 1 155 81
/**
 * Removes all of the previously-added in patterns.  See add_out_pattern.
 */
60
inline void CollisionHandlerEvent::clear_out_patterns(void);

418 15 add_out_pattern 0 4 561 38 CollisionHandlerEvent::add_out_pattern 0 1 156 518
/**
 * Adds the pattern string that indicates how the event names are generated
 * when a collision between two particular nodes is *no longer* detected.
 *
 * In general, the in_pattern event is thrown on the first detection of a
 * collision between two particular nodes.  In subsequent passes, as long as a
 * collision between those two nodes continues to be detected each frame, the
 * again_pattern is thrown.  The first frame in which the collision is no
 * longer detected, the out_pattern event is thrown.
 */
83
inline void CollisionHandlerEvent::add_out_pattern(std::string const &out_pattern);

419 15 set_out_pattern 0 4 561 38 CollisionHandlerEvent::set_out_pattern 0 1 157 190
/**
 * This method is deprecated; it completely replaces all the in patterns that
 * have previously been set with the indicated pattern.
 *
 * @deprecated Use add_out_pattern() instead.
 */
83
inline void CollisionHandlerEvent::set_out_pattern(std::string const &out_pattern);

420 20 get_num_out_patterns 0 4 561 43 CollisionHandlerEvent::get_num_out_patterns 0 1 158 73
/**
 * Returns the number of in pattern strings that have been added.
 */
67
inline int CollisionHandlerEvent::get_num_out_patterns(void) const;

421 15 get_out_pattern 0 4 561 38 CollisionHandlerEvent::get_out_pattern 0 1 159 146
/**
 * Returns the nth pattern string that indicates how the event names are
 * generated for each collision detected.  See add_out_pattern().
 */
71
inline std::string CollisionHandlerEvent::get_out_pattern(int n) const;

422 5 clear 0 4 561 28 CollisionHandlerEvent::clear 0 1 160 541
/**
 * Empties the list of elements that all colliders are known to be colliding
 * with.  No "out" events will be thrown; if the same collision is detected
 * next frame, a new "in" event will be thrown for each collision.
 *
 * This can be called each frame to defeat the persistent "in" event
 * mechanism, which prevents the same "in" event from being thrown repeatedly.
 * However, also see add_again_pattern(), which can be used to set the event
 * that is thrown when a collision is detected for two or more consecutive
 * frames.
 */
40
void CollisionHandlerEvent::clear(void);

423 5 flush 0 4 561 28 CollisionHandlerEvent::flush 0 1 161 58
/**
 * Same as clear() except "out" events are thrown.
 */
40
void CollisionHandlerEvent::flush(void);

424 14 get_class_type 0 4 561 37 CollisionHandlerEvent::get_class_type 0 1 162 0
62
static TypeHandle CollisionHandlerEvent::get_class_type(void);

425 22 ~CollisionHandlerEvent 0 4 561 45 CollisionHandlerEvent::~CollisionHandlerEvent 0 0 0
52
CollisionHandlerEvent::~CollisionHandlerEvent(void);

426 12 add_collider 0 4 564 38 CollisionHandlerPhysical::add_collider 0 2 163 164 556
/**
 * Adds a new collider to the list with a NodePath that will be updated with
 * the collider's new position, or updates the existing collider with a new
 * NodePath object.
 */

/**
 * Adds a new collider to the list with a NodePath that will be updated with
 * the collider's new position, or updates the existing collider with a new
 * NodePath object.
 *
 * The indicated DriveInterface will also be updated with the target's new
 * transform each frame.  This method should be used when the target is
 * directly controlled by a DriveInterface.
 */
222
void CollisionHandlerPhysical::add_collider(NodePath const &collider, NodePath const &target);
void CollisionHandlerPhysical::add_collider(NodePath const &collider, NodePath const &target, DriveInterface *drive_interface);

427 15 remove_collider 0 4 564 41 CollisionHandlerPhysical::remove_collider 0 1 165 92
/**
 * Removes the collider from the list of colliders that this handler knows
 * about.
 */
73
bool CollisionHandlerPhysical::remove_collider(NodePath const &collider);

428 12 has_collider 0 4 564 38 CollisionHandlerPhysical::has_collider 0 1 166 94
/**
 * Returns true if the handler knows about the indicated collider, false
 * otherwise.
 */
76
bool CollisionHandlerPhysical::has_collider(NodePath const &collider) const;

429 15 clear_colliders 0 4 564 41 CollisionHandlerPhysical::clear_colliders 0 1 167 77
/**
 * Completely empties the list of colliders this handler knows about.
 */
53
void CollisionHandlerPhysical::clear_colliders(void);

430 10 set_center 0 4 564 36 CollisionHandlerPhysical::set_center 0 1 168 269
/**
 * Specifies an arbitrary NodePath that the handler is always considered to be
 * facing.  It does not detect collisions with surfaces that appear to be
 * facing away from this NodePath.  This works best when the collision
 * surfaces in question are polygons.
 */
73
inline void CollisionHandlerPhysical::set_center(NodePath const &center);

431 12 clear_center 0 4 564 38 CollisionHandlerPhysical::clear_center 0 1 169 64
/**
 * Clears the center NodePath specified with set_center.
 */
57
inline void CollisionHandlerPhysical::clear_center(void);

432 10 get_center 0 4 564 36 CollisionHandlerPhysical::get_center 0 1 170 114
/**
 * Returns the NodePath specified with set_center, or the empty NodePath if
 * nothing has been specified.
 */
72
inline NodePath const &CollisionHandlerPhysical::get_center(void) const;

433 10 has_center 0 4 564 36 CollisionHandlerPhysical::has_center 0 1 171 95
/**
 * Returns true if a NodePath has been specified with set_center(), false
 * otherwise.
 */
61
inline bool CollisionHandlerPhysical::has_center(void) const;

434 11 has_contact 0 4 564 37 CollisionHandlerPhysical::has_contact 0 1 172 255
/**
 * Did the handler make any contacts with anything on the last collision pass?
 * Depending on how your world is setup, this can be used to tell if the
 * handler is out of the world (i.e.  out of bounds). That is the original use
 * of this call.
 */
62
inline bool CollisionHandlerPhysical::has_contact(void) const;

435 14 get_class_type 0 4 564 40 CollisionHandlerPhysical::get_class_type 0 1 173 0
65
static TypeHandle CollisionHandlerPhysical::get_class_type(void);

436 21 CollisionHandlerFloor 0 4 566 44 CollisionHandlerFloor::CollisionHandlerFloor 0 1 174 10
/**
 *
 */
51
CollisionHandlerFloor::CollisionHandlerFloor(void);

437 10 set_offset 0 4 566 33 CollisionHandlerFloor::set_offset 0 1 175 166
/**
 * Sets the linear offset to add to (or subtract from) the highest detected
 * collision point to determine the actual height at which to set the
 * collider.
 */
66
inline void CollisionHandlerFloor::set_offset(PN_stdfloat offset);

438 10 get_offset 0 4 566 33 CollisionHandlerFloor::get_offset 0 1 176 169
/**
 * Returns the linear offset to add to (or subtract from) the highest detected
 * collision point to determine the actual height at which to set the
 * collider.
 */
65
inline PN_stdfloat CollisionHandlerFloor::get_offset(void) const;

439 9 set_reach 0 4 566 32 CollisionHandlerFloor::set_reach 0 1 177 82
/**
 * Sets the reach to add to (or subtract from) the highest collision point
 */
64
inline void CollisionHandlerFloor::set_reach(PN_stdfloat reach);

440 9 get_reach 0 4 566 32 CollisionHandlerFloor::get_reach 0 1 178 85
/**
 * Returns the reach to add to (or subtract from) the highest collision point
 */
64
inline PN_stdfloat CollisionHandlerFloor::get_reach(void) const;

441 16 set_max_velocity 0 4 566 39 CollisionHandlerFloor::set_max_velocity 0 1 179 199
/**
 * Sets the maximum speed at which the object will be allowed to descend
 * towards a floor below it, in units per second.  Set this to zero to allow
 * it to instantly teleport any distance.
 */
73
inline void CollisionHandlerFloor::set_max_velocity(PN_stdfloat max_vel);

442 16 get_max_velocity 0 4 566 39 CollisionHandlerFloor::get_max_velocity 0 1 180 160
/**
 * Retrieves the maximum speed at which the object will be allowed to descend
 * towards a floor below it, in units per second.  See set_max_velocity().
 */
71
inline PN_stdfloat CollisionHandlerFloor::get_max_velocity(void) const;

443 14 get_class_type 0 4 566 37 CollisionHandlerFloor::get_class_type 0 1 181 0
62
static TypeHandle CollisionHandlerFloor::get_class_type(void);

444 22 CollisionHandlerPusher 0 4 567 46 CollisionHandlerPusher::CollisionHandlerPusher 0 1 182 10
/**
 *
 */
53
CollisionHandlerPusher::CollisionHandlerPusher(void);

445 14 set_horizontal 0 4 567 38 CollisionHandlerPusher::set_horizontal 0 1 183 10
/**
 *
 */
62
inline void CollisionHandlerPusher::set_horizontal(bool flag);

446 14 get_horizontal 0 4 567 38 CollisionHandlerPusher::get_horizontal 0 1 184 10
/**
 *
 */
63
inline bool CollisionHandlerPusher::get_horizontal(void) const;

447 14 get_class_type 0 4 567 38 CollisionHandlerPusher::get_class_type 0 1 185 0
63
static TypeHandle CollisionHandlerPusher::get_class_type(void);

448 27 CollisionHandlerFluidPusher 0 4 568 56 CollisionHandlerFluidPusher::CollisionHandlerFluidPusher 0 1 186 10
/**
 *
 */
63
CollisionHandlerFluidPusher::CollisionHandlerFluidPusher(void);

449 14 get_class_type 0 4 568 43 CollisionHandlerFluidPusher::get_class_type 0 1 187 0
68
static TypeHandle CollisionHandlerFluidPusher::get_class_type(void);

450 28 ~CollisionHandlerFluidPusher 0 4 568 57 CollisionHandlerFluidPusher::~CollisionHandlerFluidPusher 0 0 0
64
CollisionHandlerFluidPusher::~CollisionHandlerFluidPusher(void);

451 23 CollisionHandlerGravity 0 4 569 48 CollisionHandlerGravity::CollisionHandlerGravity 0 1 188 10
/**
 *
 */
55
CollisionHandlerGravity::CollisionHandlerGravity(void);

452 10 set_offset 0 4 569 35 CollisionHandlerGravity::set_offset 0 1 189 166
/**
 * Sets the linear offset to add to (or subtract from) the highest detected
 * collision point to determine the actual height at which to set the
 * collider.
 */
68
inline void CollisionHandlerGravity::set_offset(PN_stdfloat offset);

453 10 get_offset 0 4 569 35 CollisionHandlerGravity::get_offset 0 1 190 169
/**
 * Returns the linear offset to add to (or subtract from) the highest detected
 * collision point to determine the actual height at which to set the
 * collider.
 */
67
inline PN_stdfloat CollisionHandlerGravity::get_offset(void) const;

454 9 set_reach 0 4 569 34 CollisionHandlerGravity::set_reach 0 1 191 82
/**
 * Sets the reach to add to (or subtract from) the highest collision point
 */
66
inline void CollisionHandlerGravity::set_reach(PN_stdfloat reach);

455 9 get_reach 0 4 569 34 CollisionHandlerGravity::get_reach 0 1 192 85
/**
 * Returns the reach to add to (or subtract from) the highest collision point
 */
66
inline PN_stdfloat CollisionHandlerGravity::get_reach(void) const;

456 19 get_airborne_height 0 4 569 44 CollisionHandlerGravity::get_airborne_height 0 1 193 238
/**
 * Return the height of the object from the ground.
 *
 * The object might not necessarily be at rest.  Use is_on_ground() if you
 * want to know whether the object is on the ground and at rest.
 *
 * See Also: is_in_outer_space()
 */
76
inline PN_stdfloat CollisionHandlerGravity::get_airborne_height(void) const;

457 12 is_on_ground 0 4 569 37 CollisionHandlerGravity::is_on_ground 0 1 194 33
/**
 * Is the object at rest?
 */
62
inline bool CollisionHandlerGravity::is_on_ground(void) const;

458 19 get_impact_velocity 0 4 569 44 CollisionHandlerGravity::get_impact_velocity 0 1 195 282
/**
 * How hard did the object hit the ground.  This value is set on impact with
 * the ground.  You may want to watch (poll) on is_on_groun() and when that is
 * true, call get_impact_velocity(). Normally I avoid polling, but we are
 * calling is_on_ground() frequently anyway.
 */
76
inline PN_stdfloat CollisionHandlerGravity::get_impact_velocity(void) const;

459 18 get_contact_normal 0 4 569 43 CollisionHandlerGravity::get_contact_normal 0 1 196 10
/**
 *
 */
79
inline LVector3 const &CollisionHandlerGravity::get_contact_normal(void) const;

460 12 add_velocity 0 4 569 37 CollisionHandlerGravity::add_velocity 0 1 197 184
/**
 * Adds the sepcified amount to the current velocity.  This is mostly here
 * allow this common operation to be faster for scripting, but it's also more
 * concise even in cpp.
 */
72
inline void CollisionHandlerGravity::add_velocity(PN_stdfloat velocity);

461 12 set_velocity 0 4 569 37 CollisionHandlerGravity::set_velocity 0 1 198 46
/**
 * Sets the current vertical velocity.
 */
72
inline void CollisionHandlerGravity::set_velocity(PN_stdfloat velocity);

462 12 get_velocity 0 4 569 37 CollisionHandlerGravity::get_velocity 0 1 199 354
/**
 * Gets the current vertical velocity.
 *
 * Generally, negative values mean the object is in free fall; while postive
 * values mean the object has vertical thrust.
 *
 * A zero value does not necessarily mean the object on the ground, it may
 * also be weightless and/or at the apex of its jump.
 *
 * See Also: is_on_ground() and get_gravity()
 */
69
inline PN_stdfloat CollisionHandlerGravity::get_velocity(void) const;

463 11 set_gravity 0 4 569 36 CollisionHandlerGravity::set_gravity 0 1 200 56
/**
 * Sets the linear gravity force (always plumb).
 */
70
inline void CollisionHandlerGravity::set_gravity(PN_stdfloat gravity);

464 11 get_gravity 0 4 569 36 CollisionHandlerGravity::get_gravity 0 1 201 56
/**
 * Gets the linear gravity force (always plumb).
 */
68
inline PN_stdfloat CollisionHandlerGravity::get_gravity(void) const;

465 16 set_max_velocity 0 4 569 41 CollisionHandlerGravity::set_max_velocity 0 1 202 199
/**
 * Sets the maximum speed at which the object will be allowed to descend
 * towards a floor below it, in units per second.  Set this to zero to allow
 * it to instantly teleport any distance.
 */
75
inline void CollisionHandlerGravity::set_max_velocity(PN_stdfloat max_vel);

466 16 get_max_velocity 0 4 569 41 CollisionHandlerGravity::get_max_velocity 0 1 203 160
/**
 * Retrieves the maximum speed at which the object will be allowed to descend
 * towards a floor below it, in units per second.  See set_max_velocity().
 */
73
inline PN_stdfloat CollisionHandlerGravity::get_max_velocity(void) const;

467 15 set_legacy_mode 0 4 569 40 CollisionHandlerGravity::set_legacy_mode 0 1 204 229
/**
 * Enables old behavior required by Toontown (Sellbot Factory lava room is
 * good test case, lava and conveyor belt specifically). Behavior is to throw
 * enter/exit events only for floor that the toon is in contact with
 */
71
inline void CollisionHandlerGravity::set_legacy_mode(bool legacy_mode);

468 15 get_legacy_mode 0 4 569 40 CollisionHandlerGravity::get_legacy_mode 0 1 205 49
/**
 * returns true if legacy mode is enabled
 */
65
inline bool CollisionHandlerGravity::get_legacy_mode(void) const;

469 14 get_class_type 0 4 569 39 CollisionHandlerGravity::get_class_type 0 1 206 0
64
static TypeHandle CollisionHandlerGravity::get_class_type(void);

470 28 CollisionHandlerHighestEvent 0 4 571 58 CollisionHandlerHighestEvent::CollisionHandlerHighestEvent 0 2 207 208 168
/**
 * The default CollisionHandlerEvent will throw no events.  Its pattern
 * strings must first be set via a call to add_in_pattern() and/or
 * add_out_pattern().
 */
180
CollisionHandlerHighestEvent::CollisionHandlerHighestEvent(void);
inline CollisionHandlerHighestEvent::CollisionHandlerHighestEvent(CollisionHandlerHighestEvent const &) = default;

471 14 get_class_type 0 4 571 44 CollisionHandlerHighestEvent::get_class_type 0 1 209 0
69
static TypeHandle CollisionHandlerHighestEvent::get_class_type(void);

472 29 ~CollisionHandlerHighestEvent 0 4 571 59 CollisionHandlerHighestEvent::~CollisionHandlerHighestEvent 0 0 0
66
CollisionHandlerHighestEvent::~CollisionHandlerHighestEvent(void);

473 21 CollisionHandlerQueue 0 4 572 44 CollisionHandlerQueue::CollisionHandlerQueue 0 2 210 211 10
/**
 *
 */
145
CollisionHandlerQueue::CollisionHandlerQueue(void);
inline CollisionHandlerQueue::CollisionHandlerQueue(CollisionHandlerQueue const &) = default;

474 12 sort_entries 0 4 572 35 CollisionHandlerQueue::sort_entries 0 1 212 257
/**
 * Sorts all the detected collisions front-to-back by
 * from_intersection_point() so that those intersection points closest to the
 * collider's origin (e.g., the center of the CollisionSphere, or the point_a
 * of a CollisionSegment) appear first.
 */
47
void CollisionHandlerQueue::sort_entries(void);

475 13 clear_entries 0 4 572 36 CollisionHandlerQueue::clear_entries 0 1 213 50
/**
 * Removes all the entries from the queue.
 */
48
void CollisionHandlerQueue::clear_entries(void);

476 15 get_num_entries 0 4 572 38 CollisionHandlerQueue::get_num_entries 0 1 214 69
/**
 * Returns the number of CollisionEntries detected last pass.
 */
55
int CollisionHandlerQueue::get_num_entries(void) const;

477 9 get_entry 0 4 572 32 CollisionHandlerQueue::get_entry 0 1 215 61
/**
 * Returns the nth CollisionEntry detected last pass.
 */
62
CollisionEntry *CollisionHandlerQueue::get_entry(int n) const;

478 6 output 0 4 572 29 CollisionHandlerQueue::output 0 1 216 10
/**
 *
 */
60
void CollisionHandlerQueue::output(std::ostream &out) const;

479 5 write 0 4 572 28 CollisionHandlerQueue::write 0 1 217 10
/**
 *
 */
81
void CollisionHandlerQueue::write(std::ostream &out, int indent_level = 0) const;

480 14 get_class_type 0 4 572 37 CollisionHandlerQueue::get_class_type 0 1 218 0
62
static TypeHandle CollisionHandlerQueue::get_class_type(void);

481 22 ~CollisionHandlerQueue 0 4 572 45 CollisionHandlerQueue::~CollisionHandlerQueue 0 0 0
52
CollisionHandlerQueue::~CollisionHandlerQueue(void);

482 15 CollisionSphere 0 4 574 32 CollisionSphere::CollisionSphere 0 2 219 220 114
/**
 *
 */

/**
 *
 */

/**
 * Creates an invalid sphere.  Only used when reading from a bam file.
 */

/**
 *
 */
210
inline explicit CollisionSphere::CollisionSphere(LPoint3 const &center, PN_stdfloat radius);
inline explicit CollisionSphere::CollisionSphere(PN_stdfloat cx, PN_stdfloat cy, PN_stdfloat cz, PN_stdfloat radius);

483 10 set_center 0 4 574 27 CollisionSphere::set_center 0 2 221 222 22
/**
 *
 */

/**
 *
 */
149
inline void CollisionSphere::set_center(LPoint3 const &center);
inline void CollisionSphere::set_center(PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);

484 10 get_center 0 4 574 27 CollisionSphere::get_center 0 1 223 10
/**
 *
 */
62
inline LPoint3 const &CollisionSphere::get_center(void) const;

485 10 set_radius 0 4 574 27 CollisionSphere::set_radius 0 1 224 10
/**
 *
 */
60
inline void CollisionSphere::set_radius(PN_stdfloat radius);

486 10 get_radius 0 4 574 27 CollisionSphere::get_radius 0 1 225 10
/**
 *
 */
59
inline PN_stdfloat CollisionSphere::get_radius(void) const;

487 14 get_class_type 0 4 574 31 CollisionSphere::get_class_type 0 1 226 0
56
static TypeHandle CollisionSphere::get_class_type(void);

488 16 ~CollisionSphere 0 4 574 33 CollisionSphere::~CollisionSphere 0 0 0
40
CollisionSphere::~CollisionSphere(void);

489 18 CollisionInvSphere 0 4 575 38 CollisionInvSphere::CollisionInvSphere 0 2 227 228 114
/**
 *
 */

/**
 *
 */

/**
 * Creates an invalid sphere.  Only used when reading from a bam file.
 */

/**
 *
 */
222
inline explicit CollisionInvSphere::CollisionInvSphere(LPoint3 const &center, PN_stdfloat radius);
inline explicit CollisionInvSphere::CollisionInvSphere(PN_stdfloat cx, PN_stdfloat cy, PN_stdfloat cz, PN_stdfloat radius);

490 14 get_class_type 0 4 575 34 CollisionInvSphere::get_class_type 0 1 229 0
59
static TypeHandle CollisionInvSphere::get_class_type(void);

491 19 ~CollisionInvSphere 0 4 575 39 CollisionInvSphere::~CollisionInvSphere 0 0 0
46
CollisionInvSphere::~CollisionInvSphere(void);

492 12 CollisionRay 0 4 576 26 CollisionRay::CollisionRay 0 3 230 231 232 219
/**
 * Creates an invalid ray.  This isn't terribly useful; it's expected that the
 * user will subsequently adjust the ray via set_origin()/set_direction() or
 * set_from_lens().
 */

/**
 *
 */

/**
 *
 */

/**
 *
 */
274
inline CollisionRay::CollisionRay(void);
inline explicit CollisionRay::CollisionRay(LPoint3 const &origin, LVector3 const &direction);
inline explicit CollisionRay::CollisionRay(PN_stdfloat ox, PN_stdfloat oy, PN_stdfloat oz, PN_stdfloat dx, PN_stdfloat dy, PN_stdfloat dz);

493 10 set_origin 0 4 576 24 CollisionRay::set_origin 0 2 233 234 22
/**
 *
 */

/**
 *
 */
143
inline void CollisionRay::set_origin(LPoint3 const &origin);
inline void CollisionRay::set_origin(PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);

494 10 get_origin 0 4 576 24 CollisionRay::get_origin 0 1 235 10
/**
 *
 */
59
inline LPoint3 const &CollisionRay::get_origin(void) const;

495 13 set_direction 0 4 576 27 CollisionRay::set_direction 0 2 236 237 22
/**
 *
 */

/**
 *
 */
153
inline void CollisionRay::set_direction(LVector3 const &direction);
inline void CollisionRay::set_direction(PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);

496 13 get_direction 0 4 576 27 CollisionRay::get_direction 0 1 238 10
/**
 *
 */
63
inline LVector3 const &CollisionRay::get_direction(void) const;

497 13 set_from_lens 0 4 576 27 CollisionRay::set_from_lens 0 2 239 240 591
/**
 * Accepts a LensNode and a 2-d point in the range [-1,1].  Sets the
 * CollisionRay so that it begins at the LensNode's near plane and extends to
 * infinity, making it suitable for picking objects from the screen given a
 * camera and a mouse location.
 */

/**
 * Accepts a LensNode and a 2-d point in the range [-1,1].  Sets the
 * CollisionRay so that it begins at the LensNode's near plane and extends to
 * infinity, making it suitable for picking objects from the screen given a
 * camera and a mouse location.
 *
 * Returns true if the point was acceptable, false otherwise.
 */
164
bool CollisionRay::set_from_lens(LensNode *camera, LPoint2 const &point);
inline bool CollisionRay::set_from_lens(LensNode *camera, PN_stdfloat px, PN_stdfloat py);

498 14 get_class_type 0 4 576 28 CollisionRay::get_class_type 0 1 241 0
53
static TypeHandle CollisionRay::get_class_type(void);

499 13 ~CollisionRay 0 4 576 27 CollisionRay::~CollisionRay 0 0 0
34
CollisionRay::~CollisionRay(void);

500 13 CollisionLine 0 4 577 28 CollisionLine::CollisionLine 0 3 242 243 244 221
/**
 * Creates an invalid line.  This isn't terribly useful; it's expected that
 * the user will subsequently adjust the line via set_origin()/set_direction()
 * or set_from_lens().
 */

/**
 *
 */

/**
 *
 */

/**
 *
 */
280
inline CollisionLine::CollisionLine(void);
inline explicit CollisionLine::CollisionLine(LPoint3 const &origin, LVector3 const &direction);
inline explicit CollisionLine::CollisionLine(PN_stdfloat ox, PN_stdfloat oy, PN_stdfloat oz, PN_stdfloat dx, PN_stdfloat dy, PN_stdfloat dz);

501 14 get_class_type 0 4 577 29 CollisionLine::get_class_type 0 1 245 0
54
static TypeHandle CollisionLine::get_class_type(void);

502 14 ~CollisionLine 0 4 577 29 CollisionLine::~CollisionLine 0 0 0
36
CollisionLine::~CollisionLine(void);

503 17 CollisionParabola 0 4 578 36 CollisionParabola::CollisionParabola 0 2 246 247 163
/**
 * Creates an invalid parabola.
 */

/**
 * Creates a parabola with the endpoints between t1 and t2 in the parametric
 * space of the parabola.
 */

/**
 *
 */
163
inline CollisionParabola::CollisionParabola(void);
inline explicit CollisionParabola::CollisionParabola(LParabola const &parabola, PN_stdfloat t1, PN_stdfloat t2);

504 12 set_parabola 0 4 578 31 CollisionParabola::set_parabola 0 1 248 57
/**
 * Replaces the parabola specified by this solid.
 */
71
inline void CollisionParabola::set_parabola(LParabola const &parabola);

505 12 get_parabola 0 4 578 31 CollisionParabola::get_parabola 0 1 249 56
/**
 * Returns the parabola specified by this solid.
 */
68
inline LParabola const &CollisionParabola::get_parabola(void) const;

506 6 set_t1 0 4 578 25 CollisionParabola::set_t1 0 1 250 54
/**
 * Changes the starting point on the parabola.
 */
54
inline void CollisionParabola::set_t1(PN_stdfloat t1);

507 6 get_t1 0 4 578 25 CollisionParabola::get_t1 0 1 251 54
/**
 * Returns the starting point on the parabola.
 */
57
inline PN_stdfloat CollisionParabola::get_t1(void) const;

508 6 set_t2 0 4 578 25 CollisionParabola::set_t2 0 1 252 52
/**
 * Changes the ending point on the parabola.
 */
54
inline void CollisionParabola::set_t2(PN_stdfloat t2);

509 6 get_t2 0 4 578 25 CollisionParabola::get_t2 0 1 253 52
/**
 * Returns the ending point on the parabola.
 */
57
inline PN_stdfloat CollisionParabola::get_t2(void) const;

510 14 get_class_type 0 4 578 33 CollisionParabola::get_class_type 0 1 254 0
58
static TypeHandle CollisionParabola::get_class_type(void);

511 18 ~CollisionParabola 0 4 578 37 CollisionParabola::~CollisionParabola 0 0 0
44
CollisionParabola::~CollisionParabola(void);

512 16 CollisionSegment 0 4 582 34 CollisionSegment::CollisionSegment 0 3 255 256 257 227
/**
 * Creates an invalid segment.  This isn't terribly useful; it's expected that
 * the user will subsequently adjust the segment via
 * set_origin()/set_direction() or set_from_lens().
 */

/**
 *
 */

/**
 *
 */

/**
 *
 */
285
inline CollisionSegment::CollisionSegment(void);
inline explicit CollisionSegment::CollisionSegment(LPoint3 const &a, LPoint3 const &db);
inline explicit CollisionSegment::CollisionSegment(PN_stdfloat ax, PN_stdfloat ay, PN_stdfloat az, PN_stdfloat bx, PN_stdfloat by, PN_stdfloat bz);

513 11 set_point_a 0 4 582 29 CollisionSegment::set_point_a 0 2 258 259 22
/**
 *
 */

/**
 *
 */
148
inline void CollisionSegment::set_point_a(LPoint3 const &a);
inline void CollisionSegment::set_point_a(PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);

514 11 get_point_a 0 4 582 29 CollisionSegment::get_point_a 0 1 260 10
/**
 *
 */
64
inline LPoint3 const &CollisionSegment::get_point_a(void) const;

515 11 set_point_b 0 4 582 29 CollisionSegment::set_point_b 0 2 261 262 22
/**
 *
 */

/**
 *
 */
148
inline void CollisionSegment::set_point_b(LPoint3 const &b);
inline void CollisionSegment::set_point_b(PN_stdfloat x, PN_stdfloat y, PN_stdfloat z);

516 11 get_point_b 0 4 582 29 CollisionSegment::get_point_b 0 1 263 10
/**
 *
 */
64
inline LPoint3 const &CollisionSegment::get_point_b(void) const;

517 13 set_from_lens 0 4 582 31 CollisionSegment::set_from_lens 0 2 264 265 609
/**
 * Accepts a LensNode and a 2-d point in the range [-1,1].  Sets the
 * CollisionSegment so that it begins at the LensNode's near plane and extends
 * to the far plane, making it suitable for picking objects from the screen
 * given a camera and a mouse location.
 */

/**
 * Accepts a LensNode and a 2-d point in the range [-1,1].  Sets the
 * CollisionSegment so that it begins at the LensNode's near plane and extends
 * to the far plane, making it suitable for picking objects from the screen
 * given a camera and a mouse location.
 *
 * Returns true if the point was acceptable, false otherwise.
 */
172
bool CollisionSegment::set_from_lens(LensNode *camera, LPoint2 const &point);
inline bool CollisionSegment::set_from_lens(LensNode *camera, PN_stdfloat px, PN_stdfloat py);

518 14 get_class_type 0 4 582 32 CollisionSegment::get_class_type 0 1 266 0
57
static TypeHandle CollisionSegment::get_class_type(void);

519 17 ~CollisionSegment 0 4 582 35 CollisionSegment::~CollisionSegment 0 0 0
42
CollisionSegment::~CollisionSegment(void);

266
1 0 0 7 3 584 0 0 0 1 4 this 3 550  
2 0 0 4 7 586 0 0 295 /**
 * Sets the current state of the 'tangible' flag.  Set this true to make the
 * solid tangible, so that a CollisionHandlerPusher will not allow another
 * object to intersect it, or false to make it intangible, so that a
 * CollisionHandlerPusher will ignore it except to throw an event.
 */ 2 4 this 3 585  8 tangible 1 524  
3 0 0 6 8 524 0 0 266 /**
 * Returns whether the solid is considered 'tangible' or not.  An intangible
 * solid has no effect in a CollisionHandlerPusher (except to throw an event);
 * it's useful for defining 'trigger' planes and spheres, that cause an effect
 * when passed through.
 */ 1 4 this 3 550  
4 0 0 4 11 586 0 0 388 /**
 * Records a false normal for this CollisionSolid that will be reported by the
 * collision system with all collisions into it, instead of its actual normal.
 * This is useful as a workaround for the problem of an avatar wanting to
 * stand on a sloping ground; by storing a false normal, the ground appears to
 * be perfectly level, and the avatar does not tend to slide down it.
 */ 2 4 this 3 585  16 effective_normal 1 587  
5 0 0 4 12 586 0 0 71 /**
 * Removes the normal previously set by set_effective_normal().
 */ 1 4 this 3 585  
6 0 0 6 13 524 0 0 98 /**
 * Returns true if a special normal was set by set_effective_normal(), false
 * otherwise.
 */ 1 4 this 3 550  
7 0 0 6 14 587 0 0 145 /**
 * Returns the normal that was set by set_effective_normal().  It is an error
 * to call this unless has_effective_normal() returns true.
 */ 1 4 this 3 550  
8 0 0 4 15 586 0 0 296 /**
 * This is only meaningful for CollisionSolids that will be added to a
 * traverser as colliders.  It is normally true, but if set false, it means
 * that this particular solid does not care about the "effective" normal of
 * other solids it meets, but rather always uses the true normal.
 */ 2 4 this 3 585  24 respect_effective_normal 1 524  
9 0 0 6 16 524 0 0 46 /**
 * See set_respect_effective_normal().
 */ 1 4 this 3 550  
10 0 0 7 18 590 0 0 47 /**
 * Returns the solid's bounding volume.
 */ 1 4 this 3 550  
11 0 0 4 19 586 0 0 47 /**
 * Returns the solid's bounding volume.
 */ 2 4 this 3 585  15 bounding_volume 1 590  
12 0 0 4 22 586 0 0 10 /**
 *
 */ 2 4 this 3 550  3 out 1 591  
13 0 0 4 23 586 0 0 10 /**
 *
 */ 3 4 this 3 550  3 out 1 591  12 indent_level 1 541  
14 0 0 7 24 594 0 0 0 0 
15 0 0 7 26 596 294 0 59 /**
 * Create the Box by Specifying the Diagonal Points
 */ 2 3 min 1 595  3 max 1 595  
16 0 0 7 26 596 294 0 106 /**
 * Create the Box by giving a Center and distances of each of the sides of
 * box from the Center.
 */ 4 6 center 1 595  1 x 1 531  1 y 1 531  1 z 1 531  
17 0 0 6 27 541 0 0 68 /**
 * Returns 8: the number of vertices of a rectangular solid.
 */ 1 4 this 3 597  
18 0 0 7 28 584 0 0 67 /**
 * Returns the nth vertex of the Axis Aligned Bounding Box.
 */ 2 4 this 3 597  1 n 1 541  
19 0 0 7 29 584 0 0 45 /**
 * Returns the nth vertex of the OBB.
 */ 2 4 this 3 597  1 n 1 541  
20 0 0 6 30 541 0 0 65 /**
 * Returns 6: the number of faces of a rectangular solid.
 */ 1 4 this 3 597  
21 0 0 7 31 599 0 0 57 /**
 * Creates the nth face of the rectangular solid.
 */ 2 4 this 3 597  1 n 1 541  
22 0 0 7 32 599 0 0 57 /**
 * Returns the nth face of the rectangular solid.
 */ 2 4 this 3 597  1 n 1 541  
23 0 0 4 33 586 0 0 10 /**
 *
 */ 2 4 this 3 596  6 center 1 595  
24 0 0 4 33 586 0 0 10 /**
 *
 */ 4 4 this 3 596  1 x 1 531  1 y 1 531  1 z 1 531  
25 0 0 6 34 595 0 0 10 /**
 *
 */ 1 4 this 3 597  
26 0 0 6 35 595 0 0 10 /**
 *
 */ 1 4 this 3 597  
27 0 0 6 36 595 0 0 10 /**
 *
 */ 1 4 this 3 597  
28 0 0 7 37 600 0 0 10 /**
 *
 */ 1 4 this 3 597  
29 0 0 7 45 594 0 0 0 0 
30 0 0 7 48 601 303 0 10 /**
 *
 */ 3 1 a 1 595  2 db 1 595  6 radius 1 531  
31 0 0 7 48 601 303 0 10 /**
 *
 */ 7 2 ax 1 531  2 ay 1 531  2 az 1 531  2 bx 1 531  2 by 1 531  2 bz 1 531  6 radius 1 531  
32 0 0 4 49 586 0 0 10 /**
 *
 */ 2 4 this 3 601  1 a 1 595  
33 0 0 4 49 586 0 0 10 /**
 *
 */ 4 4 this 3 601  1 x 1 531  1 y 1 531  1 z 1 531  
34 0 0 6 50 595 0 0 10 /**
 *
 */ 1 4 this 3 602  
35 0 0 4 51 586 0 0 10 /**
 *
 */ 2 4 this 3 601  1 b 1 595  
36 0 0 4 51 586 0 0 10 /**
 *
 */ 4 4 this 3 601  1 x 1 531  1 y 1 531  1 z 1 531  
37 0 0 6 52 595 0 0 10 /**
 *
 */ 1 4 this 3 602  
38 0 0 4 53 586 0 0 10 /**
 *
 */ 2 4 this 3 601  6 radius 1 531  
39 0 0 6 54 531 0 0 10 /**
 *
 */ 1 4 this 3 602  
40 0 0 7 60 594 0 0 0 0 
41 0 0 7 65 606 306 0 0 1 6 param0 0 604  
42 0 0 7 64 594 0 0 0 0 
43 0 0 7 69 552 0 0 10 /**
 *
 */ 1 4 name 1 607  
44 0 0 4 70 586 0 0 98 /**
 * Simultaneously sets both the "from" and "into" CollideMask values to the
 * same thing.
 */ 2 4 this 3 552  4 mask 1 608  
45 0 0 4 71 586 0 0 222 /**
 * Sets the "from" CollideMask.  In order for a collision to be detected from
 * this object into another object, the intersection of this object's "from"
 * mask and the other object's "into" mask must be nonzero.
 */ 2 4 this 3 552  4 mask 1 608  
46 0 0 4 72 586 0 0 222 /**
 * Sets the "into" CollideMask.  In order for a collision to be detected from
 * another object into this object, the intersection of the other object's
 * "from" mask and this object's "into" mask must be nonzero.
 */ 2 4 this 3 552  4 mask 1 608  
47 0 0 7 73 608 0 0 233 /**
 * Returns the current "from" CollideMask.  In order for a collision to be
 * detected from this object into another object, the intersection of this
 * object's "from" mask and the other object's "into" mask must be nonzero.
 */ 1 4 this 3 609  
48 0 0 7 74 608 0 0 233 /**
 * Returns the current "into" CollideMask.  In order for a collision to be
 * detected from another object into this object, the intersection of the
 * other object's "from" mask and this object's "into" mask must be nonzero.
 */ 1 4 this 3 609  
49 0 0 4 80 586 0 0 44 /**
 * Removes all solids from the node.
 */ 1 4 this 3 552  
50 0 0 6 81 611 0 0 10 /**
 *
 */ 1 4 this 3 609  
51 0 0 7 82 550 0 0 10 /**
 *
 */ 2 4 this 3 609  1 n 1 611  
52 0 0 7 84 585 0 0 10 /**
 *
 */ 2 4 this 3 552  1 n 1 611  
53 0 0 4 85 586 0 0 55 /**
 * Replaces the solid with the indicated index.
 */ 3 4 this 3 552  1 n 1 611  5 solid 1 585  
54 0 0 4 86 586 0 0 77 /**
 * Inserts the indicated solid to the node at the indicated position.
 */ 3 4 this 3 552  1 n 1 611  5 solid 1 550  
55 0 0 4 87 586 0 0 110 /**
 * Removes the solid with the indicated index.  This will shift all subsequent
 * indices down by one.
 */ 2 4 this 3 552  1 n 1 611  
56 0 0 6 88 611 0 0 121 /**
 * Adds the indicated solid to the node.  Returns the index of the new solid
 * within the node's list of solids.
 */ 2 4 this 3 552  5 solid 1 550  
57 0 0 6 91 541 0 0 114 /**
 * Returns the collider_sort value that has been set for this particular node.
 * See set_collider_sort().
 */ 1 4 this 3 609  
58 0 0 4 92 586 0 0 594 /**
 * Sets a particular collider_sort value on this node.  This controls the
 * order in which colliders (that is, "from nodes") are grouped together for
 * the collision traversal.
 *
 * If there are 32 or fewer colliders added to any particular
 * CollisionTraverser, then this value has no meaning.  It is only useful if
 * there are many colliders, which may force the CollisionTraverser to make
 * multiple passes through the data; in that case, it may be a useful
 * optimization to group colliders that have similar bounding volumes together
 * (by giving them similar sort values).
 */ 2 4 this 3 552  4 sort 1 541  
59 0 0 7 95 608 0 0 80 /**
 * Returns the default into_collide_mask assigned to new CollisionNodes.
 */ 0 
60 0 0 7 97 594 0 0 0 0 
61 0 0 7 100 615 326 0 0 1 6 param0 0 613  
62 0 0 7 100 615 326 0 10 /**
 *
 */ 1 4 name 1 607  
63 0 0 4 102 586 0 0 370 /**
 * Sets the flag that indicates whether the prev_transform stored on a node
 * (as updated via set_fluid_pos(), etc.) is respected to calculate
 * collisions.  If this is true, certain types of collision tests will be
 * enhanced by the information about objects in motion.  If this is false,
 * objects are always considered to be static.  The default is false.
 */ 2 4 this 3 615  4 flag 1 524  
64 0 0 6 103 524 0 0 162 /**
 * Returns the flag that indicates whether the prev_transform stored on a node
 * is respected to calculate collisions.  See set_respect_prev_transform().
 */ 1 4 this 3 613  
65 0 0 4 105 586 0 0 437 /**
 * Adds a new CollisionNode, representing an object that will be tested for
 * collisions into other objects, along with the handler that will serve each
 * detected collision.  Each CollisionNode may be served by only one handler
 * at a time, but a given handler may serve many CollisionNodes.
 *
 * The handler that serves a particular node may be changed from time to time
 * by calling add_collider() again on the same node.
 */ 3 4 this 3 615  8 collider 1 616  7 handler 1 606  
66 0 0 6 106 524 0 0 263 /**
 * Removes the collider (and its associated handler) from the set of
 * CollisionNodes that will be tested each frame for collisions into other
 * objects.  Returns true if the definition was found and removed, false if it
 * wasn't present to begin with.
 */ 2 4 this 3 615  8 collider 1 616  
67 0 0 6 107 524 0 0 145 /**
 * Returns true if the indicated node is current in the set of nodes that will
 * be tested each frame for collisions into other objects.
 */ 2 4 this 3 613  8 collider 1 616  
68 0 0 6 108 541 0 0 108 /**
 * Returns the number of CollisionNodes that have been added to the traverser
 * via add_collider().
 */ 1 4 this 3 613  
69 0 0 7 109 617 0 0 100 /**
 * Returns the nth CollisionNode that has been added to the traverser via
 * add_collider().
 */ 2 4 this 3 613  1 n 1 541  
70 0 0 7 111 606 306 0 169 /**
 * Returns the handler that is currently assigned to serve the indicated
 * collision node, or NULL if the node is not on the traverser's set of active
 * nodes.
 */ 2 4 this 3 613  8 collider 1 616  
71 0 0 4 112 586 0 0 90 /**
 * Completely empties the set of collision nodes and their associated
 * handlers.
 */ 1 4 this 3 615  
72 0 0 4 115 586 0 0 10 /**
 *
 */ 2 4 this 3 615  4 root 1 616  
73 0 0 4 116 586 0 0 777 /**
 * Uses the indicated CollisionRecorder object to start recording the
 * intersection tests made by each subsequent call to traverse() on this
 * object.  A particular CollisionRecorder object can only record one
 * traverser at a time; if this object has already been assigned to another
 * traverser, that assignment is broken.
 *
 * This is intended to be used in a debugging mode to try to determine what
 * work is being performed by the collision traversal.  Usually, attaching a
 * recorder will impose significant runtime overhead.
 *
 * This does not transfer ownership of the CollisionRecorder pointer;
 * maintenance of that remains the caller's responsibility.  If the
 * CollisionRecorder is destructed, it will cleanly remove itself from the
 * traverser.
 */ 2 4 this 3 615  8 recorder 1 545  
74 0 0 6 117 524 0 0 120 /**
 * Returns true if the CollisionTraverser has a CollisionRecorder object
 * currently assigned, false otherwise.
 */ 1 4 this 3 613  
75 0 0 6 118 545 0 0 99 /**
 * Returns the CollisionRecorder currently assigned, or NULL if no recorder is
 * assigned.
 */ 1 4 this 3 613  
76 0 0 4 119 586 0 0 107 /**
 * Removes the CollisionRecorder from the traverser and restores normal low-
 * overhead operation.
 */ 1 4 this 3 615  
77 0 0 7 126 553 0 0 300 /**
 * This is a high-level function to create a CollisionVisualizer object to
 * render the collision tests performed by this traverser.  The supplied root
 * should be any node in the scene graph; typically, the top node (e.g.
 * render).  The CollisionVisualizer will be attached to this node.
 */ 2 4 this 3 615  4 root 1 616  
78 0 0 4 127 586 0 0 69 /**
 * Undoes the effect of a previous call to show_collisions().
 */ 1 4 this 3 615  
79 0 0 4 128 586 0 0 10 /**
 *
 */ 2 4 this 3 613  3 out 1 591  
80 0 0 4 129 586 0 0 10 /**
 *
 */ 3 4 this 3 613  3 out 1 591  12 indent_level 1 541  
81 0 0 7 130 594 0 0 0 0 
82 0 0 4 124 586 0 0 10 /**
 *
 */ 2 4 this 3 618  3 out 1 591  
83 0 0 7 125 594 0 0 0 0 
84 0 0 7 133 550 0 0 104 /**
 * Returns the CollisionSolid pointer for the particular solid that triggered
 * this collision.
 */ 1 4 this 3 620  
85 0 0 6 134 524 0 0 288 /**
 * Returns true if the "into" solid is, in fact, a CollisionSolid, and its
 * pointer is known (in which case get_into() may be called to retrieve it).
 * If this returns false, the collision was detected into a GeomNode, and
 * there is no CollisionSolid pointer to be retrieved.
 */ 1 4 this 3 620  
86 0 0 7 135 550 0 0 243 /**
 * Returns the CollisionSolid pointer for the particular solid was collided
 * into.  This pointer might be NULL if the collision was into a piece of
 * visible geometry, instead of a normal CollisionSolid collision; see
 * has_into().
 */ 1 4 this 3 620  
87 0 0 7 136 552 0 0 182 /**
 * Returns the node that contains the CollisionSolid that triggered this
 * collision.  This will be a node that has been added to a CollisionTraverser
 * via add_collider().
 */ 1 4 this 3 620  
88 0 0 7 137 553 0 0 254 /**
 * Returns the node that contains the CollisionSolid that was collided into.
 * This returns a PandaNode pointer instead of something more specific,
 * because it might be either a CollisionNode or a GeomNode.
 *
 * Also see get_into_node_path().
 */ 1 4 this 3 620  
89 0 0 7 138 617 0 0 224 /**
 * Returns the NodePath that represents the CollisionNode that contains the
 * CollisionSolid that triggered this collision.  This will be a NodePath that
 * has been added to a CollisionTraverser via add_collider().
 */ 1 4 this 3 620  
90 0 0 7 139 617 0 0 338 /**
 * Returns the NodePath that represents the specific CollisionNode or GeomNode
 * instance that was collided into.  This is the same node returned by
 * get_into_node(), represented as a NodePath; however, it may be more useful
 * because the NodePath can resolve the particular instance of the node, if
 * there is more than one.
 */ 1 4 this 3 620  
91 0 0 4 140 586 0 0 82 /**
 * Sets a time value for this collision relative to other CollisionEntries
 */ 2 4 this 3 573  1 t 1 531  
92 0 0 6 141 531 0 0 83 /**
 * returns time value for this collision relative to other CollisionEntries
 */ 1 4 this 3 620  
93 0 0 6 142 524 0 0 188 /**
 * returns true if this represents an actual collision as opposed to a
 * potential collision, needed for iterative collision resolution where path
 * of collider changes mid-frame
 */ 1 4 this 3 620  
94 0 0 4 143 586 0 0 45 /**
 * prepare for another collision test
 */ 1 4 this 3 573  
95 0 0 6 144 524 0 0 203 /**
 * Returns true if the collision was detected by a CollisionTraverser whose
 * respect_prev_transform flag was set true, meaning we should consider motion
 * significant in evaluating collisions.
 */ 1 4 this 3 620  
96 0 0 4 145 586 0 0 178 /**
 * Stores the point, on the surface of the "into" object, at which a collision
 * is detected.
 *
 * This point is specified in the coordinate space of the "into" object.
 */ 2 4 this 3 573  5 point 1 595  
97 0 0 4 146 586 0 0 171 /**
 * Stores the surface normal of the "into" object at the point of the
 * intersection.
 *
 * This normal is specified in the coordinate space of the "into" object.
 */ 2 4 this 3 573  6 normal 1 587  
98 0 0 4 147 586 0 0 352 /**
 * Stores the point, within the interior of the "into" object, which
 * represents the depth to which the "from" object has penetrated.  This can
 * also be described as the intersection point on the surface of the "from"
 * object (which is inside the "into" object).
 *
 * This point is specified in the coordinate space of the "into" object.
 */ 2 4 this 3 573  5 point 1 595  
99 0 0 6 148 524 0 0 174 /**
 * Returns true if the surface point has been specified, false otherwise.  See
 * get_surface_point().  Some types of collisions may not compute the surface
 * point.
 */ 1 4 this 3 620  
100 0 0 6 149 524 0 0 176 /**
 * Returns true if the surface normal has been specified, false otherwise.
 * See get_surface_normal().  Some types of collisions may not compute the
 * surface normal.
 */ 1 4 this 3 620  
101 0 0 6 150 524 0 0 176 /**
 * Returns true if the interior point has been specified, false otherwise.
 * See get_interior_point().  Some types of collisions may not compute the
 * interior point.
 */ 1 4 this 3 620  
102 0 0 4 151 586 0 0 190 /**
 * Stores the position of the "from" object at the instant at which the
 * collision is first detected.
 *
 * This position is specified in the coordinate space of the "into" object.
 */ 2 4 this 3 573  3 pos 1 595  
103 0 0 4 152 586 0 0 154 /**
 * Stores the surface normal of the "into" object at the contact pos.
 *
 * This normal is specified in the coordinate space of the "into" object.
 */ 2 4 this 3 573  6 normal 1 587  
104 0 0 6 153 524 0 0 172 /**
 * Returns true if the contact position has been specified, false otherwise.
 * See get_contact_pos().  Some types of collisions may not compute the
 * contact pos.
 */ 1 4 this 3 620  
105 0 0 6 154 524 0 0 176 /**
 * Returns true if the contact normal has been specified, false otherwise.
 * See get_contact_normal().  Some types of collisions may not compute the
 * contact normal.
 */ 1 4 this 3 620  
106 0 0 7 155 584 0 0 330 /**
 * Returns the point, on the surface of the "into" object, at which a
 * collision is detected.  This can be thought of as the first point of
 * intersection.  However the contact point is the actual first point of
 * intersection.
 *
 * The point will be converted into whichever coordinate space the caller
 * specifies.
 */ 2 4 this 3 620  5 space 1 616  
107 0 0 7 156 600 0 0 200 /**
 * Returns the surface normal of the "into" object at the point at which a
 * collision is detected.
 *
 * The normal will be converted into whichever coordinate space the caller
 * specifies.
 */ 2 4 this 3 620  5 space 1 616  
108 0 0 7 157 584 0 0 431 /**
 * Returns the point, within the interior of the "into" object, which
 * represents the depth to which the "from" object has penetrated.  This can
 * also be described as the intersection point on the surface of the "from"
 * object (which is inside the "into" object).  It can be thought of as the
 * deepest point of intersection.
 *
 * The point will be converted into whichever coordinate space the caller
 * specifies.
 */ 2 4 this 3 620  5 space 1 616  
109 0 0 6 158 524 0 0 244 /**
 * Simultaneously transforms the surface point, surface normal, and interior
 * point of the collision into the indicated coordinate space.
 *
 * Returns true if all three properties are available, or false if any one of
 * them is not.
 */ 5 4 this 3 620  5 space 1 616  13 surface_point 1 584  14 surface_normal 1 600  14 interior_point 1 584  
110 0 0 7 159 584 0 0 200 /**
 * Returns the position of the "from" object at the instant that a collision
 * is first detected.
 *
 * The position will be converted into whichever coordinate space the caller
 * specifies.
 */ 2 4 this 3 620  5 space 1 616  
111 0 0 7 160 600 0 0 175 /**
 * Returns the surface normal of the "into" object at the contact position.
 *
 * The normal will be converted into whichever coordinate space the caller
 * specifies.
 */ 2 4 this 3 620  5 space 1 616  
112 0 0 6 161 524 0 0 230 /**
 * Simultaneously transforms the contact position and contact normal of the
 * collision into the indicated coordinate space.
 *
 * Returns true if all three properties are available, or false if any one of
 * them is not.
 */ 4 4 this 3 620  5 space 1 616  11 contact_pos 1 584  14 contact_normal 1 600  
113 0 0 4 162 586 0 0 10 /**
 *
 */ 2 4 this 3 620  3 out 1 591  
114 0 0 4 163 586 0 0 10 /**
 *
 */ 3 4 this 3 620  3 out 1 591  12 indent_level 1 541  
115 0 0 7 176 594 0 0 0 0 
116 0 0 7 179 624 388 0 10 /**
 *
 */ 1 4 copy 1 622  
117 0 0 7 179 624 388 0 10 /**
 *
 */ 1 5 plane 1 625  
118 0 0 7 180 600 0 0 10 /**
 *
 */ 1 4 this 3 622  
119 0 0 6 181 531 0 0 10 /**
 *
 */ 2 4 this 3 622  5 point 1 595  
120 0 0 4 182 586 0 0 10 /**
 *
 */ 2 4 this 3 624  5 plane 1 625  
121 0 0 6 183 625 0 0 10 /**
 *
 */ 1 4 this 3 622  
122 0 0 4 184 586 0 0 57 /**
 * Convenience method to flip the plane in-place.
 */ 1 4 this 3 624  
123 0 0 7 190 594 0 0 0 0 
124 0 0 7 193 626 397 0 144 /**
 * This is only for the convenience of CollisionPolygon.  Normally, you should
 * not attempt to create an uninitialized CollisionPlane.
 */ 0 
125 0 0 4 194 586 0 0 47 /**
 * store away a vertex to index against
 */ 2 4 this 3 626  4 vert 1 595  
126 0 0 4 195 586 0 0 42 /**
 * store a triangle for processing
 */ 4 4 this 3 626  6 pointA 1 627  6 pointB 1 627  6 pointC 1 627  
127 0 0 6 196 627 0 0 0 1 4 this 3 628  
128 0 0 6 197 595 0 0 0 2 4 this 3 628  5 index 1 627  
129 0 0 6 199 627 0 0 0 1 4 this 3 628  
130 0 0 7 200 630 0 0 0 2 4 this 3 628  5 index 1 627  
131 0 0 7 205 594 0 0 0 0 
132 0 0 7 208 631 405 0 10 /**
 *
 */ 2 5 begin 1 595  3 end 1 595  
133 0 0 7 208 631 405 0 10 /**
 *
 */ 3 1 a 1 632  1 b 1 632  1 c 1 632  
134 0 0 7 208 631 405 0 10 /**
 *
 */ 4 1 a 1 632  1 b 1 632  1 c 1 632  1 d 1 632  
135 0 0 6 209 611 0 0 66 /**
 * Returns the number of vertices of the CollisionPolygon.
 */ 1 4 this 3 636  
136 0 0 7 210 584 0 0 82 /**
 * Returns the nth vertex of the CollisionPolygon, expressed in 3-D space.
 */ 2 4 this 3 636  1 n 1 611  
137 0 0 6 212 524 0 0 338 /**
 * Verifies that the indicated set of points will define a valid
 * CollisionPolygon: that is, at least three non-collinear points, with no
 * points repeated.
 *
 * This does not check that the polygon defined is convex; that check is made
 * later, once we have projected the points to 2-d space where the decision is
 * easier.
 */ 2 5 begin 1 595  3 end 1 595  
138 0 0 6 212 524 0 0 167 /**
 * Verifies that the indicated set of points will define a valid
 * CollisionPolygon: that is, at least three non-collinear points, with no
 * points repeated.
 */ 3 1 a 1 595  1 b 1 595  1 c 1 595  
139 0 0 6 212 524 0 0 167 /**
 * Verifies that the indicated set of points will define a valid
 * CollisionPolygon: that is, at least three non-collinear points, with no
 * points repeated.
 */ 4 1 a 1 595  1 b 1 595  1 c 1 595  1 d 1 595  
140 0 0 6 213 524 0 0 122 /**
 * Returns true if the CollisionPolygon is valid (that is, it has at least
 * three vertices), or false otherwise.
 */ 1 4 this 3 636  
141 0 0 6 214 524 0 0 106 /**
 * Returns true if the CollisionPolygon appears to be concave, or false if it
 * is safely convex.
 */ 1 4 this 3 636  
142 0 0 7 218 594 0 0 0 0 
143 0 0 7 221 638 425 0 168 /**
 * The default CollisionHandlerEvent will throw no events.  Its pattern
 * strings must first be set via a call to add_in_pattern() and/or
 * add_out_pattern().
 */ 0 
144 0 0 7 221 638 425 0 0 1 6 param0 0 639  
145 0 0 4 222 586 0 0 80 /**
 * Removes all of the previously-added in patterns.  See add_in_pattern.
 */ 1 4 this 3 638  
146 0 0 4 223 586 0 0 1586 /**
 * Adds a pattern string to the list of events that will be generated in
 * response to a collision.  The pattern string describes how the event name
 * will be composed.  It is a string that may contain any of the following:
 *
 * %fn  - the name of the "from" object's node %in  - the name of the "into"
 * object's node %fs  - 't' if "from" is tangible, 'i' if intangible %is  -
 * 't' if "into" is tangible, 'i' if intangible %ig  - 'c' if the collision is
 * into a CollisionNode, 'g' if it is a geom.
 *
 * %(tag)fh - generate event only if "from" node has the indicated net tag.
 * %(tag)fx - generate event only if "from" node does not have the indicated
 * net tag.  %(tag)ih - generate event only if "into" node has the indicated
 * net tag.  %(tag)ix - generate event only if "into" node does not have the
 * indicated net tag.  %(tag)ft - the indicated net tag value of the "from"
 * node.  %(tag)it - the indicated net tag value of the "into" node.
 *
 * Parentheses in the above are literal and should be included in the actual
 * pattern.
 *
 * The event name will be based on the in_pattern string specified here, with
 * all occurrences of the above strings replaced with the corresponding
 * values.
 *
 * In general, the in_pattern event is thrown on the first detection of a
 * collision between two particular nodes.  In subsequent passes, as long as a
 * collision between those two nodes continues to be detected each frame, the
 * again_pattern is thrown.  The first frame in which the collision is no
 * longer detected, the out_pattern event is thrown.
 */ 2 4 this 3 638  10 in_pattern 1 607  
147 0 0 4 224 586 0 0 189 /**
 * This method is deprecated; it completely replaces all the in patterns that
 * have previously been set with the indicated pattern.
 *
 * @deprecated Use add_in_pattern() instead.
 */ 2 4 this 3 638  10 in_pattern 1 607  
148 0 0 6 225 541 0 0 73 /**
 * Returns the number of in pattern strings that have been added.
 */ 1 4 this 3 639  
149 0 0 6 226 607 0 0 145 /**
 * Returns the nth pattern string that indicates how the event names are
 * generated for each collision detected.  See add_in_pattern().
 */ 2 4 this 3 639  1 n 1 541  
150 0 0 4 228 586 0 0 83 /**
 * Removes all of the previously-added in patterns.  See add_again_pattern.
 */ 1 4 this 3 638  
151 0 0 4 229 586 0 0 649 /**
 * Adds the pattern string that indicates how the event names are generated
 * when a collision between two particular nodes is *still* detected.  This
 * event is thrown each consecutive time a collision between two particular
 * nodes is detected, starting with the second time.
 *
 * In general, the in_pattern event is thrown on the first detection of a
 * collision between two particular nodes.  In subsequent passes, as long as a
 * collision between those two nodes continues to be detected each frame, the
 * again_pattern is thrown.  The first frame in which the collision is no
 * longer detected, the out_pattern event is thrown.
 */ 2 4 this 3 638  13 again_pattern 1 607  
152 0 0 4 230 586 0 0 192 /**
 * This method is deprecated; it completely replaces all the in patterns that
 * have previously been set with the indicated pattern.
 *
 * @deprecated Use add_again_pattern() instead.
 */ 2 4 this 3 638  13 again_pattern 1 607  
153 0 0 6 231 541 0 0 73 /**
 * Returns the number of in pattern strings that have been added.
 */ 1 4 this 3 639  
154 0 0 6 232 607 0 0 148 /**
 * Returns the nth pattern string that indicates how the event names are
 * generated for each collision detected.  See add_again_pattern().
 */ 2 4 this 3 639  1 n 1 541  
155 0 0 4 234 586 0 0 81 /**
 * Removes all of the previously-added in patterns.  See add_out_pattern.
 */ 1 4 this 3 638  
156 0 0 4 235 586 0 0 518 /**
 * Adds the pattern string that indicates how the event names are generated
 * when a collision between two particular nodes is *no longer* detected.
 *
 * In general, the in_pattern event is thrown on the first detection of a
 * collision between two particular nodes.  In subsequent passes, as long as a
 * collision between those two nodes continues to be detected each frame, the
 * again_pattern is thrown.  The first frame in which the collision is no
 * longer detected, the out_pattern event is thrown.
 */ 2 4 this 3 638  11 out_pattern 1 607  
157 0 0 4 236 586 0 0 190 /**
 * This method is deprecated; it completely replaces all the in patterns that
 * have previously been set with the indicated pattern.
 *
 * @deprecated Use add_out_pattern() instead.
 */ 2 4 this 3 638  11 out_pattern 1 607  
158 0 0 6 237 541 0 0 73 /**
 * Returns the number of in pattern strings that have been added.
 */ 1 4 this 3 639  
159 0 0 6 238 607 0 0 146 /**
 * Returns the nth pattern string that indicates how the event names are
 * generated for each collision detected.  See add_out_pattern().
 */ 2 4 this 3 639  1 n 1 541  
160 0 0 4 245 586 0 0 541 /**
 * Empties the list of elements that all colliders are known to be colliding
 * with.  No "out" events will be thrown; if the same collision is detected
 * next frame, a new "in" event will be thrown for each collision.
 *
 * This can be called each frame to defeat the persistent "in" event
 * mechanism, which prevents the same "in" event from being thrown repeatedly.
 * However, also see add_again_pattern(), which can be used to set the event
 * that is thrown when a collision is detected for two or more consecutive
 * frames.
 */ 1 4 this 3 638  
161 0 0 4 246 586 0 0 58 /**
 * Same as clear() except "out" events are thrown.
 */ 1 4 this 3 638  
162 0 0 7 247 594 0 0 0 0 
163 0 0 4 250 586 0 0 180 /**
 * Adds a new collider to the list with a NodePath that will be updated with
 * the collider's new position, or updates the existing collider with a new
 * NodePath object.
 */ 3 4 this 3 641  8 collider 1 616  6 target 1 616  
164 0 0 4 250 586 0 0 374 /**
 * Adds a new collider to the list with a NodePath that will be updated with
 * the collider's new position, or updates the existing collider with a new
 * NodePath object.
 *
 * The indicated DriveInterface will also be updated with the target's new
 * transform each frame.  This method should be used when the target is
 * directly controlled by a DriveInterface.
 */ 4 4 this 3 641  8 collider 1 616  6 target 1 616  15 drive_interface 1 642  
165 0 0 6 251 524 0 0 92 /**
 * Removes the collider from the list of colliders that this handler knows
 * about.
 */ 2 4 this 3 641  8 collider 1 616  
166 0 0 6 252 524 0 0 94 /**
 * Returns true if the handler knows about the indicated collider, false
 * otherwise.
 */ 2 4 this 3 644  8 collider 1 616  
167 0 0 4 253 586 0 0 77 /**
 * Completely empties the list of colliders this handler knows about.
 */ 1 4 this 3 641  
168 0 0 4 254 586 0 0 269 /**
 * Specifies an arbitrary NodePath that the handler is always considered to be
 * facing.  It does not detect collisions with surfaces that appear to be
 * facing away from this NodePath.  This works best when the collision
 * surfaces in question are polygons.
 */ 2 4 this 3 641  6 center 1 616  
169 0 0 4 255 586 0 0 64 /**
 * Clears the center NodePath specified with set_center.
 */ 1 4 this 3 641  
170 0 0 6 256 616 0 0 114 /**
 * Returns the NodePath specified with set_center, or the empty NodePath if
 * nothing has been specified.
 */ 1 4 this 3 644  
171 0 0 6 257 524 0 0 95 /**
 * Returns true if a NodePath has been specified with set_center(), false
 * otherwise.
 */ 1 4 this 3 644  
172 0 0 6 258 524 0 0 255 /**
 * Did the handler make any contacts with anything on the last collision pass?
 * Depending on how your world is setup, this can be used to tell if the
 * handler is out of the world (i.e.  out of bounds). That is the original use
 * of this call.
 */ 1 4 this 3 644  
173 0 0 7 261 594 0 0 0 0 
174 0 0 7 263 646 425 0 10 /**
 *
 */ 0 
175 0 0 4 264 586 0 0 166 /**
 * Sets the linear offset to add to (or subtract from) the highest detected
 * collision point to determine the actual height at which to set the
 * collider.
 */ 2 4 this 3 646  6 offset 1 531  
176 0 0 6 265 531 0 0 169 /**
 * Returns the linear offset to add to (or subtract from) the highest detected
 * collision point to determine the actual height at which to set the
 * collider.
 */ 1 4 this 3 647  
177 0 0 4 266 586 0 0 82 /**
 * Sets the reach to add to (or subtract from) the highest collision point
 */ 2 4 this 3 646  5 reach 1 531  
178 0 0 6 267 531 0 0 85 /**
 * Returns the reach to add to (or subtract from) the highest collision point
 */ 1 4 this 3 647  
179 0 0 4 268 586 0 0 199 /**
 * Sets the maximum speed at which the object will be allowed to descend
 * towards a floor below it, in units per second.  Set this to zero to allow
 * it to instantly teleport any distance.
 */ 2 4 this 3 646  7 max_vel 1 531  
180 0 0 6 269 531 0 0 160 /**
 * Retrieves the maximum speed at which the object will be allowed to descend
 * towards a floor below it, in units per second.  See set_max_velocity().
 */ 1 4 this 3 647  
181 0 0 7 273 594 0 0 0 0 
182 0 0 7 275 649 425 0 10 /**
 *
 */ 0 
183 0 0 4 276 586 0 0 10 /**
 *
 */ 2 4 this 3 649  4 flag 1 524  
184 0 0 6 277 524 0 0 10 /**
 *
 */ 1 4 this 3 650  
185 0 0 7 279 594 0 0 0 0 
186 0 0 7 281 652 450 0 10 /**
 *
 */ 0 
187 0 0 7 282 594 0 0 0 0 
188 0 0 7 285 653 425 0 10 /**
 *
 */ 0 
189 0 0 4 286 586 0 0 166 /**
 * Sets the linear offset to add to (or subtract from) the highest detected
 * collision point to determine the actual height at which to set the
 * collider.
 */ 2 4 this 3 653  6 offset 1 531  
190 0 0 6 287 531 0 0 169 /**
 * Returns the linear offset to add to (or subtract from) the highest detected
 * collision point to determine the actual height at which to set the
 * collider.
 */ 1 4 this 3 654  
191 0 0 4 288 586 0 0 82 /**
 * Sets the reach to add to (or subtract from) the highest collision point
 */ 2 4 this 3 653  5 reach 1 531  
192 0 0 6 289 531 0 0 85 /**
 * Returns the reach to add to (or subtract from) the highest collision point
 */ 1 4 this 3 654  
193 0 0 6 290 531 0 0 238 /**
 * Return the height of the object from the ground.
 *
 * The object might not necessarily be at rest.  Use is_on_ground() if you
 * want to know whether the object is on the ground and at rest.
 *
 * See Also: is_in_outer_space()
 */ 1 4 this 3 654  
194 0 0 6 291 524 0 0 33 /**
 * Is the object at rest?
 */ 1 4 this 3 654  
195 0 0 6 292 531 0 0 282 /**
 * How hard did the object hit the ground.  This value is set on impact with
 * the ground.  You may want to watch (poll) on is_on_groun() and when that is
 * true, call get_impact_velocity(). Normally I avoid polling, but we are
 * calling is_on_ground() frequently anyway.
 */ 1 4 this 3 654  
196 0 0 6 293 587 0 0 10 /**
 *
 */ 1 4 this 3 654  
197 0 0 4 294 586 0 0 184 /**
 * Adds the sepcified amount to the current velocity.  This is mostly here
 * allow this common operation to be faster for scripting, but it's also more
 * concise even in cpp.
 */ 2 4 this 3 653  8 velocity 1 531  
198 0 0 4 295 586 0 0 46 /**
 * Sets the current vertical velocity.
 */ 2 4 this 3 653  8 velocity 1 531  
199 0 0 6 296 531 0 0 354 /**
 * Gets the current vertical velocity.
 *
 * Generally, negative values mean the object is in free fall; while postive
 * values mean the object has vertical thrust.
 *
 * A zero value does not necessarily mean the object on the ground, it may
 * also be weightless and/or at the apex of its jump.
 *
 * See Also: is_on_ground() and get_gravity()
 */ 1 4 this 3 654  
200 0 0 4 297 586 0 0 56 /**
 * Sets the linear gravity force (always plumb).
 */ 2 4 this 3 653  7 gravity 1 531  
201 0 0 6 298 531 0 0 56 /**
 * Gets the linear gravity force (always plumb).
 */ 1 4 this 3 654  
202 0 0 4 299 586 0 0 199 /**
 * Sets the maximum speed at which the object will be allowed to descend
 * towards a floor below it, in units per second.  Set this to zero to allow
 * it to instantly teleport any distance.
 */ 2 4 this 3 653  7 max_vel 1 531  
203 0 0 6 300 531 0 0 160 /**
 * Retrieves the maximum speed at which the object will be allowed to descend
 * towards a floor below it, in units per second.  See set_max_velocity().
 */ 1 4 this 3 654  
204 0 0 4 301 586 0 0 229 /**
 * Enables old behavior required by Toontown (Sellbot Factory lava room is
 * good test case, lava and conveyor belt specifically). Behavior is to throw
 * enter/exit events only for floor that the toon is in contact with
 */ 2 4 this 3 653  11 legacy_mode 1 524  
205 0 0 6 302 524 0 0 49 /**
 * returns true if legacy mode is enabled
 */ 1 4 this 3 654  
206 0 0 7 313 594 0 0 0 0 
207 0 0 7 315 656 472 0 168 /**
 * The default CollisionHandlerEvent will throw no events.  Its pattern
 * strings must first be set via a call to add_in_pattern() and/or
 * add_out_pattern().
 */ 0 
208 0 0 7 315 656 472 0 0 1 6 param0 0 657  
209 0 0 7 316 594 0 0 0 0 
210 0 0 7 319 659 481 0 10 /**
 *
 */ 0 
211 0 0 7 319 659 481 0 0 1 6 param0 0 660  
212 0 0 4 320 586 0 0 257 /**
 * Sorts all the detected collisions front-to-back by
 * from_intersection_point() so that those intersection points closest to the
 * collider's origin (e.g., the center of the CollisionSphere, or the point_a
 * of a CollisionSegment) appear first.
 */ 1 4 this 3 659  
213 0 0 4 321 586 0 0 50 /**
 * Removes all the entries from the queue.
 */ 1 4 this 3 659  
214 0 0 6 322 541 0 0 69 /**
 * Returns the number of CollisionEntries detected last pass.
 */ 1 4 this 3 660  
215 0 0 7 323 573 380 0 61 /**
 * Returns the nth CollisionEntry detected last pass.
 */ 2 4 this 3 660  1 n 1 541  
216 0 0 4 327 586 0 0 10 /**
 *
 */ 2 4 this 3 660  3 out 1 591  
217 0 0 4 328 586 0 0 10 /**
 *
 */ 3 4 this 3 660  3 out 1 591  12 indent_level 1 541  
218 0 0 7 329 594 0 0 0 0 
219 0 0 7 332 662 488 0 10 /**
 *
 */ 2 6 center 1 595  6 radius 1 531  
220 0 0 7 332 662 488 0 10 /**
 *
 */ 4 2 cx 1 531  2 cy 1 531  2 cz 1 531  6 radius 1 531  
221 0 0 4 333 586 0 0 10 /**
 *
 */ 2 4 this 3 662  6 center 1 595  
222 0 0 4 333 586 0 0 10 /**
 *
 */ 4 4 this 3 662  1 x 1 531  1 y 1 531  1 z 1 531  
223 0 0 6 334 595 0 0 10 /**
 *
 */ 1 4 this 3 663  
224 0 0 4 335 586 0 0 10 /**
 *
 */ 2 4 this 3 662  6 radius 1 531  
225 0 0 6 336 531 0 0 10 /**
 *
 */ 1 4 this 3 663  
226 0 0 7 339 594 0 0 0 0 
227 0 0 7 342 665 491 0 10 /**
 *
 */ 2 6 center 1 595  6 radius 1 531  
228 0 0 7 342 665 491 0 10 /**
 *
 */ 4 2 cx 1 531  2 cy 1 531  2 cz 1 531  6 radius 1 531  
229 0 0 7 343 594 0 0 0 0 
230 0 0 7 346 666 499 0 183 /**
 * Creates an invalid ray.  This isn't terribly useful; it's expected that the
 * user will subsequently adjust the ray via set_origin()/set_direction() or
 * set_from_lens().
 */ 0 
231 0 0 7 346 666 499 0 10 /**
 *
 */ 2 6 origin 1 595  9 direction 1 587  
232 0 0 7 346 666 499 0 10 /**
 *
 */ 6 2 ox 1 531  2 oy 1 531  2 oz 1 531  2 dx 1 531  2 dy 1 531  2 dz 1 531  
233 0 0 4 347 586 0 0 10 /**
 *
 */ 2 4 this 3 666  6 origin 1 595  
234 0 0 4 347 586 0 0 10 /**
 *
 */ 4 4 this 3 666  1 x 1 531  1 y 1 531  1 z 1 531  
235 0 0 6 348 595 0 0 10 /**
 *
 */ 1 4 this 3 667  
236 0 0 4 350 586 0 0 10 /**
 *
 */ 2 4 this 3 666  9 direction 1 587  
237 0 0 4 350 586 0 0 10 /**
 *
 */ 4 4 this 3 666  1 x 1 531  1 y 1 531  1 z 1 531  
238 0 0 6 351 587 0 0 10 /**
 *
 */ 1 4 this 3 667  
239 0 0 6 353 524 0 0 327 /**
 * Accepts a LensNode and a 2-d point in the range [-1,1].  Sets the
 * CollisionRay so that it begins at the LensNode's near plane and extends to
 * infinity, making it suitable for picking objects from the screen given a
 * camera and a mouse location.
 *
 * Returns true if the point was acceptable, false otherwise.
 */ 3 4 this 3 666  6 camera 1 669  5 point 1 671  
240 0 0 6 353 524 0 0 262 /**
 * Accepts a LensNode and a 2-d point in the range [-1,1].  Sets the
 * CollisionRay so that it begins at the LensNode's near plane and extends to
 * infinity, making it suitable for picking objects from the screen given a
 * camera and a mouse location.
 */ 4 4 this 3 666  6 camera 1 669  2 px 1 531  2 py 1 531  
241 0 0 7 354 594 0 0 0 0 
242 0 0 7 357 675 502 0 185 /**
 * Creates an invalid line.  This isn't terribly useful; it's expected that
 * the user will subsequently adjust the line via set_origin()/set_direction()
 * or set_from_lens().
 */ 0 
243 0 0 7 357 675 502 0 10 /**
 *
 */ 2 6 origin 1 595  9 direction 1 587  
244 0 0 7 357 675 502 0 10 /**
 *
 */ 6 2 ox 1 531  2 oy 1 531  2 oz 1 531  2 dx 1 531  2 dy 1 531  2 dz 1 531  
245 0 0 7 358 594 0 0 0 0 
246 0 0 7 361 676 511 0 39 /**
 * Creates an invalid parabola.
 */ 0 
247 0 0 7 361 676 511 0 110 /**
 * Creates a parabola with the endpoints between t1 and t2 in the parametric
 * space of the parabola.
 */ 3 8 parabola 1 677  2 t1 1 531  2 t2 1 531  
248 0 0 4 362 586 0 0 57 /**
 * Replaces the parabola specified by this solid.
 */ 2 4 this 3 676  8 parabola 1 677  
249 0 0 6 363 677 0 0 56 /**
 * Returns the parabola specified by this solid.
 */ 1 4 this 3 678  
250 0 0 4 364 586 0 0 54 /**
 * Changes the starting point on the parabola.
 */ 2 4 this 3 676  2 t1 1 531  
251 0 0 6 365 531 0 0 54 /**
 * Returns the starting point on the parabola.
 */ 1 4 this 3 678  
252 0 0 4 366 586 0 0 52 /**
 * Changes the ending point on the parabola.
 */ 2 4 this 3 676  2 t2 1 531  
253 0 0 6 367 531 0 0 52 /**
 * Returns the ending point on the parabola.
 */ 1 4 this 3 678  
254 0 0 7 374 594 0 0 0 0 
255 0 0 7 377 680 519 0 191 /**
 * Creates an invalid segment.  This isn't terribly useful; it's expected that
 * the user will subsequently adjust the segment via
 * set_origin()/set_direction() or set_from_lens().
 */ 0 
256 0 0 7 377 680 519 0 10 /**
 *
 */ 2 1 a 1 595  2 db 1 595  
257 0 0 7 377 680 519 0 10 /**
 *
 */ 6 2 ax 1 531  2 ay 1 531  2 az 1 531  2 bx 1 531  2 by 1 531  2 bz 1 531  
258 0 0 4 378 586 0 0 10 /**
 *
 */ 2 4 this 3 680  1 a 1 595  
259 0 0 4 378 586 0 0 10 /**
 *
 */ 4 4 this 3 680  1 x 1 531  1 y 1 531  1 z 1 531  
260 0 0 6 379 595 0 0 10 /**
 *
 */ 1 4 this 3 681  
261 0 0 4 380 586 0 0 10 /**
 *
 */ 2 4 this 3 680  1 b 1 595  
262 0 0 4 380 586 0 0 10 /**
 *
 */ 4 4 this 3 680  1 x 1 531  1 y 1 531  1 z 1 531  
263 0 0 6 381 595 0 0 10 /**
 *
 */ 1 4 this 3 681  
264 0 0 6 382 524 0 0 336 /**
 * Accepts a LensNode and a 2-d point in the range [-1,1].  Sets the
 * CollisionSegment so that it begins at the LensNode's near plane and extends
 * to the far plane, making it suitable for picking objects from the screen
 * given a camera and a mouse location.
 *
 * Returns true if the point was acceptable, false otherwise.
 */ 3 4 this 3 680  6 camera 1 669  5 point 1 671  
265 0 0 6 382 524 0 0 271 /**
 * Accepts a LensNode and a 2-d point in the range [-1,1].  Sets the
 * CollisionSegment so that it begins at the LensNode's near plane and extends
 * to the far plane, making it suitable for picking objects from the screen
 * given a camera and a mouse location.
 */ 4 4 this 3 680  6 camera 1 669  2 px 1 531  2 py 1 531  
266 0 0 7 385 594 0 0 0 0 
163
520 14 CollisionSolid 0 75777 14 CollisionSolid 14 CollisionSolid 0 0 0 0 0 4 683 684 685 686 14 267 268 269 270 271 272 273 274 275 276 277 278 279 280 0 0 1 0 521 0 0 0 0 457
/**
 * The abstract base class for all things that can collide with other things
 * in the world, and all the things they can collide with (except geometry).
 *
 * This class and its derivatives really work very similarly to the way
 * BoundingVolume and all of its derivatives work.  There's a different
 * subclass for each basic shape of solid, and double-dispatch function calls
 * handle the subset of the N*N intersection tests that we care about.
 */

521 17 CopyOnWriteObject 0 2048 17 CopyOnWriteObject 17 CopyOnWriteObject 0 0 0 0 0 0 0 0 0 0 0 0 169
/**
 * This base class provides basic reference counting, but also can be used
 * with a CopyOnWritePointer to provide get_read_pointer() and
 * get_write_pointer().
 */

522 7 LPoint3 0 2105344 7 LPoint3 7 LPoint3 0 0 523 0 0 0 0 0 0 0 0 0 0

523 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 337
/**
 * This is a three-component point in space (as opposed to a three-component
 * vector, which represents a direction and a distance).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

524 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

525 32 ConstPointerTo< BoundingVolume > 0 2048 32 ConstPointerTo< BoundingVolume > 32 ConstPointerTo< BoundingVolume > 0 0 0 0 0 0 0 0 0 0 0 0 0

526 12 CollisionBox 0 141313 12 CollisionBox 12 CollisionBox 0 0 0 1 281 294 4 687 688 689 690 12 282 283 284 285 286 287 288 289 290 291 292 293 0 0 1 0 520 0 0 0 0 47
/**
 * A cuboid collision volume or object.
 */

527 13 LPoint3 const 0 8832 13 LPoint3 const 13 LPoint3 const 0 0 522 0 0 0 0 0 0 0 0 0 0

528 8 LVector3 0 2105344 8 LVector3 8 LVector3 0 0 529 0 0 0 0 0 0 0 0 0 0

529 9 LVector3f 0 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 338
/**
 * This is a three-component vector distance (as opposed to a three-component
 * point, which represents a particular point in space).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

530 16 CollisionCapsule 0 141313 16 CollisionCapsule 16 CollisionCapsule 0 0 0 1 295 303 3 691 692 693 7 296 297 298 299 300 301 302 0 0 1 0 520 0 0 0 0 201
/**
 * This implements a solid consisting of a cylinder with hemispherical endcaps,
 * also known as a capsule or a spherocylinder.
 *
 * This shape was previously erroneously called CollisionTube.
 */

531 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 532 0 0 0 0 0 0 0 0 0 0

532 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

533 16 CollisionHandler 0 141313 16 CollisionHandler 16 CollisionHandler 0 0 0 1 305 306 0 1 304 0 0 1 0 534 0 0 0 0 262
/**
 * The abstract interface to a number of classes that decide what to do when a
 * collision is detected.  One of these must be assigned to the
 * CollisionTraverser that is processing collisions in order to specify how to
 * dispatch detected collisions.
 */

534 19 TypedReferenceCount 0 2048 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 410
/**
 * A base class for things which need to inherit from both TypedObject and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedObjects and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

535 13 CollisionNode 0 75777 13 CollisionNode 13 CollisionNode 0 0 0 1 307 0 5 694 695 696 697 698 17 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 1 744 0 1 0 536 0 0 0 0 261
/**
 * A node in the scene graph that can hold any number of CollisionSolids.
 * This may either represent a bit of static geometry in the scene that things
 * will collide with, or an animated object twirling around in the world and
 * running into things.
 */

536 9 PandaNode 0 2048 9 PandaNode 9 PandaNode 0 0 0 0 0 0 0 0 0 0 0 0 175
/**
 * A basic node of the scene graph or data graph.  This is the base class of
 * all specialized nodes, and also serves as a generic node with no special
 * properties.
 */

537 11 CollideMask 0 2105344 11 CollideMask 11 CollideMask 0 0 538 0 0 0 0 0 0 0 0 0 0

538 9 BitMask32 0 2105344 9 BitMask32 9 BitMask32 0 0 539 0 0 0 0 0 0 0 0 0 0

539 23 BitMask< uint32_t, 32 > 0 2048 23 BitMask< uint32_t, 32 > 23 BitMask< uint32_t, 32 > 0 0 0 0 0 0 0 0 0 0 0 0 0

540 32 ConstPointerTo< CollisionSolid > 0 2048 32 ConstPointerTo< CollisionSolid > 32 ConstPointerTo< CollisionSolid > 0 0 0 0 0 0 0 0 0 0 0 0 0

541 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

542 18 CollisionTraverser 0 26625 18 CollisionTraverser 18 CollisionTraverser 0 0 0 1 325 326 3 699 700 701 19 327 328 329 330 331 332 333 334 335 336 337 338 339 340 343 344 345 346 347 1 745 0 1 0 543 0 0 0 0 467
/**
 * This class manages the traversal through the scene graph to detect
 * collisions.  It holds ownership of a number of collider objects, each of
 * which is a CollisionNode and an associated CollisionHandler.
 *
 * When traverse() is called, it begins at the indicated root and detects all
 * collisions with any of its collider objects against nodes at or below the
 * indicated root, calling the appropriate CollisionHandler for each detected
 * collision.
 */

543 7 Namable 0 2048 7 Namable 7 Namable 0 0 0 0 0 0 0 0 0 0 0 0 125
/**
 * A base class for all things which can have a name.  The name is either
 * empty or nonempty, but it is never NULL.
 */

544 8 NodePath 0 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 0 0 0 0 0 762
/**
 * NodePath is the fundamental system for disambiguating instances, and also
 * provides a higher-level interface for manipulating the scene graph.
 *
 * A NodePath is a list of connected nodes from the root of the graph to any
 * sub-node.  Each NodePath therefore uniquely describes one instance of a
 * node.
 *
 * NodePaths themselves are lightweight objects that may easily be copied and
 * passed by value.  Their data is stored as a series of NodePathComponents
 * that are stored on the nodes.  Holding a NodePath will keep a reference
 * count to all the nodes in the path.  However, if any node in the path is
 * removed or reparented (perhaps through a different NodePath), the NodePath
 * will automatically be updated to reflect the changes.
 */

545 19 CollisionRecorder * 0 8576 19 CollisionRecorder * 19 CollisionRecorder * 0 0 546 0 0 0 0 0 0 0 0 0 0

546 17 CollisionRecorder 0 75777 17 CollisionRecorder 17 CollisionRecorder 0 0 0 0 0 0 2 341 342 0 0 1 0 547 0 0 0 0 206
/**
 * This class is used to help debug the work the collisions system is doing.
 * It is a virtual base class that just provides an interface for recording
 * collisions tested and detected each frame.
 */

547 11 TypedObject 0 2048 11 TypedObject 11 TypedObject 0 0 0 0 0 0 0 0 0 0 0 0 2508
/**
 * This is an abstract class that all classes which use TypeHandle, and also
 * provide virtual functions to support polymorphism, should inherit from.
 * Each derived class should define get_type(), which should return the
 * specific type of the derived class.  Inheriting from this automatically
 * provides support for is_of_type() and is_exact_type().
 *
 * All classes that inherit directly or indirectly from TypedObject should
 * redefine get_type() and force_init_type(), as shown below.  Some classes
 * that do not inherit from TypedObject may still declare TypeHandles for
 * themselves by defining methods called get_class_type() and init_type().
 * Classes such as these may serve as base classes, but the dynamic type
 * identification system will be limited.  Classes that do not inherit from
 * TypedObject need not define the virtual functions get_type() and
 * force_init_type() (or any other virtual functions).
 *
 * There is a specific layout for defining the overrides from this class.
 * Keeping the definitions formatted just like these examples will allow
 * someone in the future to use a sed (or similar) script to make global
 * changes, if necessary.  Avoid rearranging the braces or the order of the
 * functions unless you're ready to change them in every file all at once.
 *
 * What follows are some examples that can be used in new classes that you
 * create.
 *
 * @par In the class definition (.h file):
 * @code
 * public:
 *   static TypeHandle get_class_type() {
 *     return _type_handle;
 *   }
 *   static void init_type() {
 *     <<<BaseClassOne>>>::init_type();
 *     <<<BaseClassTwo>>>::init_type();
 *     <<<BaseClassN>>>::init_type();
 *     register_type(_type_handle, "<<<ThisClassStringName>>>",
 *                   <<<BaseClassOne>>>::get_class_type(),
 *                   <<<BaseClassTwo>>>::get_class_type(),
 *                   <<<BaseClassN>>>::get_class_type());
 *   }
 *   virtual TypeHandle get_type() const {
 *     return get_class_type();
 *   }
 *   virtual TypeHandle force_init_type() {init_type(); return get_class_type();}
 *
 * private:
 *   static TypeHandle _type_handle;
 * @endcode
 *
 * @par In the class .cxx file:
 * @code
 * TypeHandle <<<ThisClassStringName>>>::_type_handle;
 * @endcode
 *
 * @par In the class config_<<<PackageName>>>.cxx file:
 * @code
 * ConfigureFn(config_<<<PackageName>>>) {
 *   <<<ClassOne>>>::init_type();
 *   <<<ClassTwo>>>::init_type();
 *   <<<ClassN>>>::init_type();
 * }
 * @endcode
 */

548 14 CollisionEntry 0 141313 14 CollisionEntry 14 CollisionEntry 0 0 0 0 380 8 702 703 704 705 706 707 708 709 32 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 0 0 1 0 549 0 0 0 0 437
/**
 * Defines a single collision event.  One of these is created for each
 * collision detected by a CollisionTraverser, to be dealt with by the
 * CollisionHandler.
 *
 * A CollisionEntry provides slots for a number of data values (such as
 * intersection point and normal) that might or might not be known for each
 * collision.  It is up to the handler to determine what information is known
 * and to do the right thing with it.
 */

549 27 TypedWritableReferenceCount 0 2048 27 TypedWritableReferenceCount 27 TypedWritableReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 414
/**
 * A base class for things which need to inherit from both TypedWritable and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedWritables and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

550 22 CollisionSolid const * 0 8576 22 CollisionSolid const * 22 CollisionSolid const * 0 0 551 0 0 0 0 0 0 0 0 0 0

551 20 CollisionSolid const 0 8832 20 CollisionSolid const 20 CollisionSolid const 0 0 520 0 0 0 0 0 0 0 0 0 0

552 15 CollisionNode * 0 8576 15 CollisionNode * 15 CollisionNode * 0 0 535 0 0 0 0 0 0 0 0 0 0

553 11 PandaNode * 0 8576 11 PandaNode * 11 PandaNode * 0 0 536 0 0 0 0 0 0 0 0 0 0

554 14 CollisionPlane 0 141313 14 CollisionPlane 14 CollisionPlane 0 0 0 1 381 388 2 710 711 6 382 383 384 385 386 387 0 0 1 0 520 0 0 0 0 10
/**
 *
 */

555 12 LPlane const 0 8832 12 LPlane const 12 LPlane const 0 0 556 0 0 0 0 0 0 0 0 0 0

556 6 LPlane 0 2105344 6 LPlane 6 LPlane 0 0 557 0 0 0 0 0 0 0 0 0 0

557 7 LPlanef 0 2048 7 LPlanef 7 LPlanef 0 0 0 0 0 0 0 0 0 0 0 0 120
/**
 * An abstract mathematical description of a plane.  A plane is defined by the
 * equation Ax + By + Cz + D = 0.
 */

558 18 CollisionFloorMesh 0 141313 18 CollisionFloorMesh 18 CollisionFloorMesh 0 0 0 1 389 397 2 712 713 7 390 391 392 393 394 395 396 2 746 747 0 1 0 520 0 0 0 0 124
/**
 * This object represents a solid made entirely of triangles, which will only
 * be tested again z axis aligned rays
 */

559 8 LPoint3i 0 2048 8 LPoint3i 8 LPoint3i 0 0 0 0 0 0 0 0 0 0 0 0 337
/**
 * This is a three-component point in space (as opposed to a three-component
 * vector, which represents a direction and a distance).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

560 16 CollisionPolygon 0 141313 16 CollisionPolygon 16 CollisionPolygon 0 0 0 1 398 405 3 714 715 716 6 399 400 401 402 403 404 1 748 0 1 0 554 0 0 0 0 10
/**
 *
 */

561 21 CollisionHandlerEvent 0 141313 21 CollisionHandlerEvent 21 CollisionHandlerEvent 0 0 0 1 406 425 3 717 718 719 18 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 3 749 750 751 0 1 0 533 0 0 0 0 296
/**
 * A specialized kind of CollisionHandler that throws an event for each
 * collision detected.  The event thrown may be based on the name of the
 * moving object or the struck object, or both.  The first parameter of the
 * event will be a pointer to the CollisionEntry that triggered it.
 */

562 6 string 0 2105344 11 std::string 11 std::string 0 0 563 0 0 0 0 0 0 0 0 0 0

563 20 basic_string< char > 0 2048 25 std::basic_string< char > 25 std::basic_string< char > 0 0 0 0 0 0 0 0 0 0 0 0 0

564 24 CollisionHandlerPhysical 0 75777 24 CollisionHandlerPhysical 24 CollisionHandlerPhysical 0 0 0 0 425 1 720 10 426 427 428 429 430 431 432 433 434 435 0 0 1 0 561 0 0 0 0 209
/**
 * The abstract base class for a number of CollisionHandlers that have some
 * physical effect on their moving bodies: they need to update the nodes'
 * positions based on the effects of the collision.
 */

565 14 NodePath const 0 8832 14 NodePath const 14 NodePath const 0 0 544 0 0 0 0 0 0 0 0 0 0

566 21 CollisionHandlerFloor 0 75777 21 CollisionHandlerFloor 21 CollisionHandlerFloor 0 0 0 1 436 425 3 721 722 723 7 437 438 439 440 441 442 443 0 0 1 0 564 0 0 0 0 294
/**
 * A specialized kind of CollisionHandler that sets the Z height of the
 * collider to a fixed linear offset from the highest detected collision point
 * each frame.  It's intended to implement walking around on a floor of
 * varying height by casting a ray down from the avatar's head.
 */

567 22 CollisionHandlerPusher 0 75777 22 CollisionHandlerPusher 22 CollisionHandlerPusher 0 0 0 1 444 425 1 724 3 445 446 447 0 0 1 0 564 0 0 0 0 197
/**
 * A specialized kind of CollisionHandler that simply pushes back on things
 * that attempt to move into solid walls.  This is the simplest kind of "real-
 * world" collisions you can have.
 */

568 27 CollisionHandlerFluidPusher 0 141313 27 CollisionHandlerFluidPusher 27 CollisionHandlerFluidPusher 0 0 0 1 448 450 0 1 449 0 0 1 0 567 0 0 0 0 139
/**
 * A CollisionHandlerPusher that makes use of timing and spatial information
 * from fluid collisions to improve collision response
 */

569 23 CollisionHandlerGravity 0 75777 23 CollisionHandlerGravity 23 CollisionHandlerGravity 0 0 0 1 451 425 9 725 726 727 728 729 730 731 732 733 18 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 0 0 1 0 564 0 0 0 0 294
/**
 * A specialized kind of CollisionHandler that sets the Z height of the
 * collider to a fixed linear offset from the highest detected collision point
 * each frame.  It's intended to implement walking around on a floor of
 * varying height by casting a ray down from the avatar's head.
 */

570 14 LVector3 const 0 8832 14 LVector3 const 14 LVector3 const 0 0 528 0 0 0 0 0 0 0 0 0 0

571 28 CollisionHandlerHighestEvent 0 141313 28 CollisionHandlerHighestEvent 28 CollisionHandlerHighestEvent 0 0 0 1 470 472 0 1 471 0 0 1 0 561 0 0 0 0 296
/**
 * A specialized kind of CollisionHandler that throws an event for each
 * collision detected.  The event thrown may be based on the name of the
 * moving object or the struck object, or both.  The first parameter of the
 * event will be a pointer to the CollisionEntry that triggered it.
 */

572 21 CollisionHandlerQueue 0 141313 21 CollisionHandlerQueue 21 CollisionHandlerQueue 0 0 0 1 473 481 1 734 7 474 475 476 477 478 479 480 1 752 0 1 0 533 0 0 0 0 313
/**
 * A special kind of CollisionHandler that does nothing except remember the
 * CollisionEntries detected the last pass.  This set of CollisionEntries may
 * then be queried by the calling function.  It's primarily useful when a
 * simple intersection test is being made, e.g.  for picking from the window.
 */

573 16 CollisionEntry * 0 8576 16 CollisionEntry * 16 CollisionEntry * 0 0 548 0 0 0 0 0 0 0 0 0 0

574 15 CollisionSphere 0 141313 15 CollisionSphere 15 CollisionSphere 0 0 0 1 482 488 2 735 736 5 483 484 485 486 487 0 0 1 0 520 0 0 0 0 50
/**
 * A spherical collision volume or object.
 */

575 18 CollisionInvSphere 0 141313 18 CollisionInvSphere 18 CollisionInvSphere 0 0 0 1 489 491 0 1 490 0 0 1 0 574 0 0 0 0 272
/**
 * An inverted sphere: this is a sphere whose collision surface is the inside
 * surface of the sphere.  Everything outside the sphere is solid matter;
 * everything inside is empty space.  Useful for constraining objects to
 * remain within a spherical perimeter.
 */

576 12 CollisionRay 0 141313 12 CollisionRay 12 CollisionRay 0 0 0 1 492 499 2 737 738 6 493 494 495 496 497 498 0 0 1 0 520 0 0 0 0 220
/**
 * An infinite ray, with a specific origin and direction.  It begins at its
 * origin and continues in one direction to infinity, and it has no radius.
 * Useful for picking from a window, or for gravity effects.
 */

577 13 CollisionLine 0 141313 13 CollisionLine 13 CollisionLine 0 0 0 1 500 502 0 1 501 0 0 1 0 576 0 0 0 0 131
/**
 * An infinite line, similar to a CollisionRay, except that it extends in both
 * directions.  It is, however, directional.
 */

578 17 CollisionParabola 0 141313 17 CollisionParabola 17 CollisionParabola 0 0 0 1 503 511 3 739 740 741 7 504 505 506 507 508 509 510 0 0 1 0 520 0 0 0 0 308
/**
 * This defines a parabolic arc, or subset of an arc, similar to the path of a
 * projectile or falling object.  It is finite, having a specific beginning
 * and end, but it is infinitely thin.
 *
 * Think of it as a wire bending from point t1 to point t2 along the path of a
 * pre-defined parabola.
 */

579 15 LParabola const 0 8832 15 LParabola const 15 LParabola const 0 0 580 0 0 0 0 0 0 0 0 0 0

580 9 LParabola 0 2105344 9 LParabola 9 LParabola 0 0 581 0 0 0 0 0 0 0 0 0 0

581 10 LParabolaf 0 2048 10 LParabolaf 10 LParabolaf 0 0 0 0 0 0 0 0 0 0 0 0 200
/**
 * An abstract mathematical description of a parabola, particularly useful for
 * describing arcs of projectiles.
 *
 * The parabolic equation, given parametrically here, is P = At^2 + Bt + C.
 */

582 16 CollisionSegment 0 141313 16 CollisionSegment 16 CollisionSegment 0 0 0 1 512 519 2 742 743 6 513 514 515 516 517 518 0 0 1 0 520 0 0 0 0 371
/**
 * A finite line segment, with two specific endpoints but no thickness.  It's
 * similar to a CollisionRay, except it does not continue to infinity.
 *
 * It does have an ordering, from point A to point B. If more than a single
 * point of the segment is intersecting a solid, the reported intersection
 * point is generally the closest on the segment to point A.
 */

583 13 CollisionTube 0 2105345 13 CollisionTube 13 CollisionTube 0 0 530 0 0 0 0 0 0 0 0 0 0

584 9 LPoint3 * 0 8576 9 LPoint3 * 9 LPoint3 * 0 0 522 0 0 0 0 0 0 0 0 0 0

585 16 CollisionSolid * 0 8576 16 CollisionSolid * 16 CollisionSolid * 0 0 520 0 0 0 0 0 0 0 0 0 0

586 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

587 16 LVector3 const * 0 8576 16 LVector3 const * 16 LVector3 const * 0 0 570 0 0 0 0 0 0 0 0 0 0

588 20 BoundingVolume const 0 8832 20 BoundingVolume const 20 BoundingVolume const 0 0 589 0 0 0 0 0 0 0 0 0 0

589 14 BoundingVolume 0 2048 14 BoundingVolume 14 BoundingVolume 0 0 0 0 0 0 0 0 0 0 0 0 330
/**
 * This is an abstract class for any volume in any sense which can be said to
 * define the locality of reference of a node in a graph, along with all of
 * its descendants.  It is not necessarily a geometric volume (although see
 * GeometricBoundingVolume); this is simply an abstract interface for bounds
 * of any sort.
 */

590 22 BoundingVolume const * 0 8576 22 BoundingVolume const * 22 BoundingVolume const * 0 0 588 0 0 0 0 0 0 0 0 0 0

591 9 ostream * 0 8576 14 std::ostream * 14 std::ostream * 0 0 592 0 0 0 0 0 0 0 0 0 0

592 7 ostream 0 2048 12 std::ostream 12 std::ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

593 10 TypeHandle 0 16779264 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 732
/**
 * TypeHandle is the identifier used to differentiate C++ class types.  Any
 * C++ classes that inherit from some base class, and must be differentiated
 * at run time, should store a static TypeHandle object that can be queried
 * through a static member function named get_class_type().  Most of the time,
 * it is also desirable to inherit from TypedObject, which provides some
 * virtual functions to return the TypeHandle for a particular instance.
 *
 * At its essence, a TypeHandle is simply a unique identifier that is assigned
 * by the TypeRegistry.  The TypeRegistry stores a tree of TypeHandles, so
 * that ancestry of a particular type may be queried, and the type name may be
 * retrieved for run-time display.
 */

594 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 593 0 0 0 0 0 0 0 0 0 0

595 15 LPoint3 const * 0 8576 15 LPoint3 const * 15 LPoint3 const * 0 0 527 0 0 0 0 0 0 0 0 0 0

596 14 CollisionBox * 0 8576 14 CollisionBox * 14 CollisionBox * 0 0 526 0 0 0 0 0 0 0 0 0 0

597 20 CollisionBox const * 0 8576 20 CollisionBox const * 20 CollisionBox const * 0 0 598 0 0 0 0 0 0 0 0 0 0

598 18 CollisionBox const 0 8832 18 CollisionBox const 18 CollisionBox const 0 0 526 0 0 0 0 0 0 0 0 0 0

599 8 LPlane * 0 8576 8 LPlane * 8 LPlane * 0 0 556 0 0 0 0 0 0 0 0 0 0

600 10 LVector3 * 0 8576 10 LVector3 * 10 LVector3 * 0 0 528 0 0 0 0 0 0 0 0 0 0

601 18 CollisionCapsule * 0 8576 18 CollisionCapsule * 18 CollisionCapsule * 0 0 530 0 0 0 0 0 0 0 0 0 0

602 24 CollisionCapsule const * 0 8576 24 CollisionCapsule const * 24 CollisionCapsule const * 0 0 603 0 0 0 0 0 0 0 0 0 0

603 22 CollisionCapsule const 0 8832 22 CollisionCapsule const 22 CollisionCapsule const 0 0 530 0 0 0 0 0 0 0 0 0 0

604 24 CollisionHandler const * 0 8576 24 CollisionHandler const * 24 CollisionHandler const * 0 0 605 0 0 0 0 0 0 0 0 0 0

605 22 CollisionHandler const 0 8832 22 CollisionHandler const 22 CollisionHandler const 0 0 533 0 0 0 0 0 0 0 0 0 0

606 18 CollisionHandler * 0 8576 18 CollisionHandler * 18 CollisionHandler * 0 0 533 0 0 0 0 0 0 0 0 0 0

607 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

608 13 CollideMask * 0 8576 13 CollideMask * 13 CollideMask * 0 0 537 0 0 0 0 0 0 0 0 0 0

609 21 CollisionNode const * 0 8576 21 CollisionNode const * 21 CollisionNode const * 0 0 610 0 0 0 0 0 0 0 0 0 0

610 19 CollisionNode const 0 8832 19 CollisionNode const 19 CollisionNode const 0 0 535 0 0 0 0 0 0 0 0 0 0

611 6 size_t 0 2105344 11 std::size_t 11 std::size_t 0 0 612 0 0 0 0 0 0 0 0 0 0

612 22 unsigned long long int 0 8230 22 unsigned long long int 22 unsigned long long int 0 8 0 0 0 0 0 0 0 0 0 0 0

613 26 CollisionTraverser const * 0 8576 26 CollisionTraverser const * 26 CollisionTraverser const * 0 0 614 0 0 0 0 0 0 0 0 0 0

614 24 CollisionTraverser const 0 8832 24 CollisionTraverser const 24 CollisionTraverser const 0 0 542 0 0 0 0 0 0 0 0 0 0

615 20 CollisionTraverser * 0 8576 20 CollisionTraverser * 20 CollisionTraverser * 0 0 542 0 0 0 0 0 0 0 0 0 0

616 16 NodePath const * 0 8576 16 NodePath const * 16 NodePath const * 0 0 565 0 0 0 0 0 0 0 0 0 0

617 10 NodePath * 0 8576 10 NodePath * 10 NodePath * 0 0 544 0 0 0 0 0 0 0 0 0 0

618 25 CollisionRecorder const * 0 8576 25 CollisionRecorder const * 25 CollisionRecorder const * 0 0 619 0 0 0 0 0 0 0 0 0 0

619 23 CollisionRecorder const 0 8832 23 CollisionRecorder const 23 CollisionRecorder const 0 0 546 0 0 0 0 0 0 0 0 0 0

620 22 CollisionEntry const * 0 8576 22 CollisionEntry const * 22 CollisionEntry const * 0 0 621 0 0 0 0 0 0 0 0 0 0

621 20 CollisionEntry const 0 8832 20 CollisionEntry const 20 CollisionEntry const 0 0 548 0 0 0 0 0 0 0 0 0 0

622 22 CollisionPlane const * 0 8576 22 CollisionPlane const * 22 CollisionPlane const * 0 0 623 0 0 0 0 0 0 0 0 0 0

623 20 CollisionPlane const 0 8832 20 CollisionPlane const 20 CollisionPlane const 0 0 554 0 0 0 0 0 0 0 0 0 0

624 16 CollisionPlane * 0 8576 16 CollisionPlane * 16 CollisionPlane * 0 0 554 0 0 0 0 0 0 0 0 0 0

625 14 LPlane const * 0 8576 14 LPlane const * 14 LPlane const * 0 0 555 0 0 0 0 0 0 0 0 0 0

626 20 CollisionFloorMesh * 0 8576 20 CollisionFloorMesh * 20 CollisionFloorMesh * 0 0 558 0 0 0 0 0 0 0 0 0 0

627 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

628 26 CollisionFloorMesh const * 0 8576 26 CollisionFloorMesh const * 26 CollisionFloorMesh const * 0 0 629 0 0 0 0 0 0 0 0 0 0

629 24 CollisionFloorMesh const 0 8832 24 CollisionFloorMesh const 24 CollisionFloorMesh const 0 0 558 0 0 0 0 0 0 0 0 0 0

630 10 LPoint3i * 0 8576 10 LPoint3i * 10 LPoint3i * 0 0 559 0 0 0 0 0 0 0 0 0 0

631 18 CollisionPolygon * 0 8576 18 CollisionPolygon * 18 CollisionPolygon * 0 0 560 0 0 0 0 0 0 0 0 0 0

632 17 LVecBase3 const * 0 8576 17 LVecBase3 const * 17 LVecBase3 const * 0 0 633 0 0 0 0 0 0 0 0 0 0

633 15 LVecBase3 const 0 8832 15 LVecBase3 const 15 LVecBase3 const 0 0 634 0 0 0 0 0 0 0 0 0 0

634 9 LVecBase3 0 2105344 9 LVecBase3 9 LVecBase3 0 0 635 0 0 0 0 0 0 0 0 0 0

635 10 LVecBase3f 0 2048 10 LVecBase3f 10 LVecBase3f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

636 24 CollisionPolygon const * 0 8576 24 CollisionPolygon const * 24 CollisionPolygon const * 0 0 637 0 0 0 0 0 0 0 0 0 0

637 22 CollisionPolygon const 0 8832 22 CollisionPolygon const 22 CollisionPolygon const 0 0 560 0 0 0 0 0 0 0 0 0 0

638 23 CollisionHandlerEvent * 0 8576 23 CollisionHandlerEvent * 23 CollisionHandlerEvent * 0 0 561 0 0 0 0 0 0 0 0 0 0

639 29 CollisionHandlerEvent const * 0 8576 29 CollisionHandlerEvent const * 29 CollisionHandlerEvent const * 0 0 640 0 0 0 0 0 0 0 0 0 0

640 27 CollisionHandlerEvent const 0 8832 27 CollisionHandlerEvent const 27 CollisionHandlerEvent const 0 0 561 0 0 0 0 0 0 0 0 0 0

641 26 CollisionHandlerPhysical * 0 8576 26 CollisionHandlerPhysical * 26 CollisionHandlerPhysical * 0 0 564 0 0 0 0 0 0 0 0 0 0

642 16 DriveInterface * 0 8576 16 DriveInterface * 16 DriveInterface * 0 0 643 0 0 0 0 0 0 0 0 0 0

643 14 DriveInterface 0 2048 14 DriveInterface 14 DriveInterface 0 0 0 0 0 0 0 0 0 0 0 0 191
/**
 * This is a TFormer, similar to Trackball, that moves around a transform
 * matrix in response to mouse input.  The basic motion is on a horizontal
 * plane, as if driving a vehicle.
 */

644 32 CollisionHandlerPhysical const * 0 8576 32 CollisionHandlerPhysical const * 32 CollisionHandlerPhysical const * 0 0 645 0 0 0 0 0 0 0 0 0 0

645 30 CollisionHandlerPhysical const 0 8832 30 CollisionHandlerPhysical const 30 CollisionHandlerPhysical const 0 0 564 0 0 0 0 0 0 0 0 0 0

646 23 CollisionHandlerFloor * 0 8576 23 CollisionHandlerFloor * 23 CollisionHandlerFloor * 0 0 566 0 0 0 0 0 0 0 0 0 0

647 29 CollisionHandlerFloor const * 0 8576 29 CollisionHandlerFloor const * 29 CollisionHandlerFloor const * 0 0 648 0 0 0 0 0 0 0 0 0 0

648 27 CollisionHandlerFloor const 0 8832 27 CollisionHandlerFloor const 27 CollisionHandlerFloor const 0 0 566 0 0 0 0 0 0 0 0 0 0

649 24 CollisionHandlerPusher * 0 8576 24 CollisionHandlerPusher * 24 CollisionHandlerPusher * 0 0 567 0 0 0 0 0 0 0 0 0 0

650 30 CollisionHandlerPusher const * 0 8576 30 CollisionHandlerPusher const * 30 CollisionHandlerPusher const * 0 0 651 0 0 0 0 0 0 0 0 0 0

651 28 CollisionHandlerPusher const 0 8832 28 CollisionHandlerPusher const 28 CollisionHandlerPusher const 0 0 567 0 0 0 0 0 0 0 0 0 0

652 29 CollisionHandlerFluidPusher * 0 8576 29 CollisionHandlerFluidPusher * 29 CollisionHandlerFluidPusher * 0 0 568 0 0 0 0 0 0 0 0 0 0

653 25 CollisionHandlerGravity * 0 8576 25 CollisionHandlerGravity * 25 CollisionHandlerGravity * 0 0 569 0 0 0 0 0 0 0 0 0 0

654 31 CollisionHandlerGravity const * 0 8576 31 CollisionHandlerGravity const * 31 CollisionHandlerGravity const * 0 0 655 0 0 0 0 0 0 0 0 0 0

655 29 CollisionHandlerGravity const 0 8832 29 CollisionHandlerGravity const 29 CollisionHandlerGravity const 0 0 569 0 0 0 0 0 0 0 0 0 0

656 30 CollisionHandlerHighestEvent * 0 8576 30 CollisionHandlerHighestEvent * 30 CollisionHandlerHighestEvent * 0 0 571 0 0 0 0 0 0 0 0 0 0

657 36 CollisionHandlerHighestEvent const * 0 8576 36 CollisionHandlerHighestEvent const * 36 CollisionHandlerHighestEvent const * 0 0 658 0 0 0 0 0 0 0 0 0 0

658 34 CollisionHandlerHighestEvent const 0 8832 34 CollisionHandlerHighestEvent const 34 CollisionHandlerHighestEvent const 0 0 571 0 0 0 0 0 0 0 0 0 0

659 23 CollisionHandlerQueue * 0 8576 23 CollisionHandlerQueue * 23 CollisionHandlerQueue * 0 0 572 0 0 0 0 0 0 0 0 0 0

660 29 CollisionHandlerQueue const * 0 8576 29 CollisionHandlerQueue const * 29 CollisionHandlerQueue const * 0 0 661 0 0 0 0 0 0 0 0 0 0

661 27 CollisionHandlerQueue const 0 8832 27 CollisionHandlerQueue const 27 CollisionHandlerQueue const 0 0 572 0 0 0 0 0 0 0 0 0 0

662 17 CollisionSphere * 0 8576 17 CollisionSphere * 17 CollisionSphere * 0 0 574 0 0 0 0 0 0 0 0 0 0

663 23 CollisionSphere const * 0 8576 23 CollisionSphere const * 23 CollisionSphere const * 0 0 664 0 0 0 0 0 0 0 0 0 0

664 21 CollisionSphere const 0 8832 21 CollisionSphere const 21 CollisionSphere const 0 0 574 0 0 0 0 0 0 0 0 0 0

665 20 CollisionInvSphere * 0 8576 20 CollisionInvSphere * 20 CollisionInvSphere * 0 0 575 0 0 0 0 0 0 0 0 0 0

666 14 CollisionRay * 0 8576 14 CollisionRay * 14 CollisionRay * 0 0 576 0 0 0 0 0 0 0 0 0 0

667 20 CollisionRay const * 0 8576 20 CollisionRay const * 20 CollisionRay const * 0 0 668 0 0 0 0 0 0 0 0 0 0

668 18 CollisionRay const 0 8832 18 CollisionRay const 18 CollisionRay const 0 0 576 0 0 0 0 0 0 0 0 0 0

669 10 LensNode * 0 8576 10 LensNode * 10 LensNode * 0 0 670 0 0 0 0 0 0 0 0 0 0

670 8 LensNode 0 2048 8 LensNode 8 LensNode 0 0 0 0 0 0 0 0 0 0 0 0 181
/**
 * A node that contains a Lens.  The most important example of this kind of
 * node is a Camera, but other kinds of nodes also contain a lens (for
 * instance, a Spotlight).
 */

671 15 LPoint2 const * 0 8576 15 LPoint2 const * 15 LPoint2 const * 0 0 672 0 0 0 0 0 0 0 0 0 0

672 13 LPoint2 const 0 8832 13 LPoint2 const 13 LPoint2 const 0 0 673 0 0 0 0 0 0 0 0 0 0

673 7 LPoint2 0 2105344 7 LPoint2 7 LPoint2 0 0 674 0 0 0 0 0 0 0 0 0 0

674 8 LPoint2f 0 2048 8 LPoint2f 8 LPoint2f 0 0 0 0 0 0 0 0 0 0 0 0 50
/**
 * This is a two-component point in space.
 */

675 15 CollisionLine * 0 8576 15 CollisionLine * 15 CollisionLine * 0 0 577 0 0 0 0 0 0 0 0 0 0

676 19 CollisionParabola * 0 8576 19 CollisionParabola * 19 CollisionParabola * 0 0 578 0 0 0 0 0 0 0 0 0 0

677 17 LParabola const * 0 8576 17 LParabola const * 17 LParabola const * 0 0 579 0 0 0 0 0 0 0 0 0 0

678 25 CollisionParabola const * 0 8576 25 CollisionParabola const * 25 CollisionParabola const * 0 0 679 0 0 0 0 0 0 0 0 0 0

679 23 CollisionParabola const 0 8832 23 CollisionParabola const 23 CollisionParabola const 0 0 578 0 0 0 0 0 0 0 0 0 0

680 18 CollisionSegment * 0 8576 18 CollisionSegment * 18 CollisionSegment * 0 0 582 0 0 0 0 0 0 0 0 0 0

681 24 CollisionSegment const * 0 8576 24 CollisionSegment const * 24 CollisionSegment const * 0 0 682 0 0 0 0 0 0 0 0 0 0

682 22 CollisionSegment const 0 8832 22 CollisionSegment const 22 CollisionSegment const 0 0 582 0 0 0 0 0 0 0 0 0 0

0
61
683 16 collision_origin 0 2 522 267 0 0 0 0 0 0 0 32 CollisionSolid::collision_origin 0

684 8 tangible 0 6 524 269 268 0 0 0 0 0 0 24 CollisionSolid::tangible 0

685 24 respect_effective_normal 0 6 524 275 274 0 0 0 0 0 0 40 CollisionSolid::respect_effective_normal 0

686 6 bounds 0 6 525 276 277 0 0 0 0 0 0 22 CollisionSolid::bounds 0

687 6 center 0 2 527 289 0 0 0 0 0 0 0 20 CollisionBox::center 0

688 3 min 0 2 527 290 0 0 0 0 0 0 0 17 CollisionBox::min 0

689 3 max 0 2 527 291 0 0 0 0 0 0 0 17 CollisionBox::max 0

690 10 dimensions 0 2 528 292 0 0 0 0 0 0 0 24 CollisionBox::dimensions 0

691 7 point_a 0 6 527 297 296 0 0 0 0 0 0 25 CollisionCapsule::point_a 0

692 7 point_b 0 6 527 299 298 0 0 0 0 0 0 25 CollisionCapsule::point_b 0

693 6 radius 0 6 531 301 300 0 0 0 0 0 0 24 CollisionCapsule::radius 0

694 17 from_collide_mask 0 6 537 311 309 0 0 0 0 0 0 32 CollisionNode::from_collide_mask 0

695 17 into_collide_mask 0 6 537 312 310 0 0 0 0 0 0 32 CollisionNode::into_collide_mask 0

696 6 solids 0 358 540 315 317 0 0 319 314 318 0 21 CollisionNode::solids 0

697 13 collider_sort 0 6 541 321 322 0 0 0 0 0 0 28 CollisionNode::collider_sort 0

698 20 default_collide_mask 0 2 537 323 0 0 0 0 0 0 0 35 CollisionNode::default_collide_mask 0

699 22 respect_prev_transform 0 6 524 328 327 0 0 0 0 0 0 42 CollisionTraverser::respect_prev_transform 0

700 9 colliders 0 66 544 333 0 0 0 0 332 0 0 29 CollisionTraverser::colliders 0

701 8 recorder 0 30 545 339 337 338 340 0 0 0 0 28 CollisionTraverser::recorder 0

702 10 from_solid 0 2 550 348 0 0 0 0 0 0 0 26 CollisionEntry::from_solid 0

703 10 into_solid 0 2 550 350 0 0 0 0 0 0 0 26 CollisionEntry::into_solid 0

704 9 from_node 0 2 552 351 0 0 0 0 0 0 0 25 CollisionEntry::from_node 0

705 9 into_node 0 2 553 352 0 0 0 0 0 0 0 25 CollisionEntry::into_node 0

706 14 from_node_path 0 2 544 353 0 0 0 0 0 0 0 30 CollisionEntry::from_node_path 0

707 14 into_node_path 0 2 544 354 0 0 0 0 0 0 0 30 CollisionEntry::into_node_path 0

708 1 t 0 6 531 356 355 0 0 0 0 0 0 17 CollisionEntry::t 0

709 22 respect_prev_transform 0 2 524 359 0 0 0 0 0 0 0 38 CollisionEntry::respect_prev_transform 0

710 6 normal 0 2 528 382 0 0 0 0 0 0 0 22 CollisionPlane::normal 0

711 5 plane 0 6 555 385 384 0 0 0 0 0 0 21 CollisionPlane::plane 0

712 8 vertices 0 66 527 393 0 0 0 0 392 0 0 28 CollisionFloorMesh::vertices 0

713 9 triangles 0 66 559 395 0 0 0 0 394 0 0 29 CollisionFloorMesh::triangles 0

714 6 points 0 66 522 400 0 0 0 0 399 0 0 24 CollisionPolygon::points 0

715 5 valid 0 2 524 402 0 0 0 0 0 0 0 23 CollisionPolygon::valid 0

716 7 concave 0 2 524 403 0 0 0 0 0 0 0 25 CollisionPolygon::concave 0

717 11 in_patterns 0 66 562 411 0 0 0 0 410 0 0 34 CollisionHandlerEvent::in_patterns 0

718 14 again_patterns 0 66 562 421 0 0 0 0 415 0 0 37 CollisionHandlerEvent::again_patterns 0

719 12 out_patterns 0 66 562 421 0 0 0 0 420 0 0 35 CollisionHandlerEvent::out_patterns 0

720 6 center 0 30 565 432 430 433 431 0 0 0 0 32 CollisionHandlerPhysical::center 0

721 6 offset 0 6 531 438 437 0 0 0 0 0 0 29 CollisionHandlerFloor::offset 0

722 5 reach 0 6 531 440 439 0 0 0 0 0 0 28 CollisionHandlerFloor::reach 0

723 12 max_velocity 0 6 531 442 441 0 0 0 0 0 0 35 CollisionHandlerFloor::max_velocity 0

724 10 horizontal 0 6 524 446 445 0 0 0 0 0 0 34 CollisionHandlerPusher::horizontal 0

725 6 offset 0 6 531 453 452 0 0 0 0 0 0 31 CollisionHandlerGravity::offset 0

726 5 reach 0 6 531 455 454 0 0 0 0 0 0 30 CollisionHandlerGravity::reach 0

727 15 airborne_height 0 2 531 456 0 0 0 0 0 0 0 40 CollisionHandlerGravity::airborne_height 0

728 9 on_ground 0 2 524 457 0 0 0 0 0 0 0 34 CollisionHandlerGravity::on_ground 0

729 15 impact_velocity 0 2 531 458 0 0 0 0 0 0 0 40 CollisionHandlerGravity::impact_velocity 0

730 14 contact_normal 0 2 570 459 0 0 0 0 0 0 0 39 CollisionHandlerGravity::contact_normal 0

731 8 velocity 0 6 531 462 461 0 0 0 0 0 0 33 CollisionHandlerGravity::velocity 0

732 7 gravity 0 6 531 464 463 0 0 0 0 0 0 32 CollisionHandlerGravity::gravity 0

733 12 max_velocity 0 6 531 466 465 0 0 0 0 0 0 37 CollisionHandlerGravity::max_velocity 0

734 7 entries 0 66 573 477 0 0 0 0 476 0 0 30 CollisionHandlerQueue::entries 0

735 6 center 0 6 527 484 483 0 0 0 0 0 0 23 CollisionSphere::center 0

736 6 radius 0 6 531 486 485 0 0 0 0 0 0 23 CollisionSphere::radius 0

737 6 origin 0 6 527 494 493 0 0 0 0 0 0 20 CollisionRay::origin 0

738 9 direction 0 6 570 496 495 0 0 0 0 0 0 23 CollisionRay::direction 0

739 8 parabola 0 6 579 505 504 0 0 0 0 0 0 27 CollisionParabola::parabola 0

740 2 t1 0 6 531 507 506 0 0 0 0 0 0 21 CollisionParabola::t1 0

741 2 t2 0 6 531 509 508 0 0 0 0 0 0 21 CollisionParabola::t2 0

742 7 point_a 0 6 527 514 513 0 0 0 0 0 0 25 CollisionSegment::point_a 0

743 7 point_b 0 6 527 516 515 0 0 0 0 0 0 25 CollisionSegment::point_b 0

9
744 10 get_solids 0 314 315 25 CollisionNode::get_solids 0

745 13 get_colliders 0 332 333 33 CollisionTraverser::get_colliders 0

746 12 get_vertices 0 392 393 32 CollisionFloorMesh::get_vertices 0

747 13 get_triangles 0 394 395 33 CollisionFloorMesh::get_triangles 0

748 10 get_points 0 399 400 28 CollisionPolygon::get_points 0

749 15 get_in_patterns 0 410 411 38 CollisionHandlerEvent::get_in_patterns 0

750 18 get_again_patterns 0 415 416 41 CollisionHandlerEvent::get_again_patterns 0

751 16 get_out_patterns 0 420 421 39 CollisionHandlerEvent::get_out_patterns 0

752 11 get_entries 0 476 477 34 CollisionHandlerQueue::get_entries 0

